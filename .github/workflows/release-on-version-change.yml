name: Release on Version Change

on:
  workflow_run:
    workflows:
      - Tests
    types:
      - completed
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release:
    if: github.event_name == 'workflow_dispatch' || (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.workflow_run.head_sha || github.sha }}

      - name: Read package versions
        id: versions
        run: |
          current_version=$(jq -r '.version // ""' package.json)
          if [ -z "$current_version" ]; then
            echo "The current package.json does not define a version field." >&2
            exit 1
          fi

          previous_version=""
          if git rev-parse --verify HEAD^ >/dev/null 2>&1; then
            previous_package=$(git show HEAD^:package.json 2>/dev/null || echo "")
            if [ -n "$previous_package" ]; then
              previous_version=$(jq -r '.version // ""' <<<"$previous_package")
            fi
          fi

          printf "current_version=%s\n" "$current_version" >> "$GITHUB_OUTPUT"
          printf "previous_version=%s\n" "$previous_version" >> "$GITHUB_OUTPUT"

      - name: Decide if release is needed
        id: decision
        run: |
          current="${{ steps.versions.outputs.current_version }}"
          previous="${{ steps.versions.outputs.previous_version }}"

          if [ -z "$previous" ]; then
            printf "release=%s\n" true >> "$GITHUB_OUTPUT"
            echo "No previous version detected; creating release for $current"
          elif [ "$current" != "$previous" ]; then
            printf "release=%s\n" true >> "$GITHUB_OUTPUT"
            echo "Version changed from $previous to $current"
          else
            printf "release=%s\n" false >> "$GITHUB_OUTPUT"
            echo "No version change detected; skipping release."
          fi

      - name: Publish npm package
        if: steps.decision.outputs.release == 'true'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
