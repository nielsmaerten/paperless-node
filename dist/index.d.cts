import { AxiosError, AxiosRequestConfig, Method } from 'axios';
import { DotenvConfigOptions } from 'dotenv';

interface PaperlessErrorContext {
    status?: number;
    url?: string;
    method?: string;
    data?: unknown;
    headers?: Record<string, unknown>;
    cause?: unknown;
}
declare class PaperlessApiError extends Error {
    readonly status?: number;
    readonly url?: string;
    readonly method?: string;
    readonly data?: unknown;
    readonly headers?: Record<string, unknown>;
    constructor(message: string, context?: PaperlessErrorContext);
    static fromAxiosError(error: AxiosError): PaperlessApiError;
    static from(error: unknown): PaperlessApiError;
}

interface HttpClientOptions {
    baseURL: string;
    token?: string;
    tokenPrefix?: string;
    headerName?: string;
    timeout?: number;
    userAgent?: string;
    axiosConfig?: AxiosRequestConfig;
}
interface RequestOptions<T> extends AxiosRequestConfig<T> {
    method?: Method;
}
declare class HttpClient {
    private readonly instance;
    private token?;
    private tokenPrefix?;
    private readonly headerName;
    constructor({ baseURL, token, tokenPrefix, headerName, timeout, userAgent, axiosConfig, }: HttpClientOptions);
    setToken(token: string | null, options?: {
        prefix?: string;
    }): void;
    clearToken(): void;
    request<TResponse = unknown, TData = unknown>(config: RequestOptions<TData>): Promise<TResponse>;
    get<TResponse = unknown>(url: string, config?: RequestOptions<unknown>): Promise<TResponse>;
    post<TResponse = unknown, TData = unknown>(url: string, data?: TData, config?: RequestOptions<TData>): Promise<TResponse>;
    put<TResponse = unknown, TData = unknown>(url: string, data?: TData, config?: RequestOptions<TData>): Promise<TResponse>;
    patch<TResponse = unknown, TData = unknown>(url: string, data?: TData, config?: RequestOptions<TData>): Promise<TResponse>;
    delete<TResponse = unknown>(url: string, config?: RequestOptions<unknown>): Promise<TResponse>;
    iteratePaginated<TItem>(config: RequestOptions<unknown>): AsyncGenerator<TItem, void, unknown>;
    listAll<TItem>(config: RequestOptions<unknown>): Promise<TItem[]>;
}

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
interface paths {
    "/api/bulk_edit_objects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Perform a bulk edit operation on a list of objects */
        post: operations["bulk_edit_objects"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/config/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get the application configuration */
        get: operations["config_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/config/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["config_retrieve"];
        put: operations["config_update"];
        post?: never;
        delete: operations["config_destroy"];
        options?: never;
        head?: never;
        patch: operations["config_partial_update"];
        trace?: never;
    };
    "/api/correspondents/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["correspondents_list"];
        put?: never;
        post: operations["correspondents_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/correspondents/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["correspondents_retrieve"];
        put: operations["correspondents_update"];
        post?: never;
        delete: operations["correspondents_destroy"];
        options?: never;
        head?: never;
        patch: operations["correspondents_partial_update"];
        trace?: never;
    };
    "/api/custom_fields/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["custom_fields_list"];
        put?: never;
        post: operations["custom_fields_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/custom_fields/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["custom_fields_retrieve"];
        put: operations["custom_fields_update"];
        post?: never;
        delete: operations["custom_fields_destroy"];
        options?: never;
        head?: never;
        patch: operations["custom_fields_partial_update"];
        trace?: never;
    };
    "/api/document_types/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["document_types_list"];
        put?: never;
        post: operations["document_types_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/document_types/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["document_types_retrieve"];
        put: operations["document_types_update"];
        post?: never;
        delete: operations["document_types_destroy"];
        options?: never;
        head?: never;
        patch: operations["document_types_partial_update"];
        trace?: never;
    };
    "/api/documents/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Document views including search */
        get: operations["documents_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a single document */
        get: operations["documents_retrieve"];
        /** @description Pass a user object to serializer */
        put: operations["documents_update"];
        post?: never;
        /** @description Pass a user object to serializer */
        delete: operations["documents_destroy"];
        options?: never;
        head?: never;
        /** @description Pass a user object to serializer */
        patch: operations["documents_partial_update"];
        trace?: never;
    };
    "/api/documents/{id}/download/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Download the document */
        get: operations["documents_download_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{id}/email/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Email the document to one or more recipients as an attachment. */
        post: operations["documents_email_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{id}/history/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description View the document history */
        get: operations["documents_history_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{id}/metadata/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description View the document metadata */
        get: operations["documents_metadata_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{id}/notes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description View, add, or delete notes for the document */
        get: operations["documents_notes_list"];
        put?: never;
        /** @description View, add, or delete notes for the document */
        post: operations["documents_notes_create"];
        /** @description View, add, or delete notes for the document */
        delete: operations["documents_notes_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{id}/preview/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description View the document preview */
        get: operations["documents_preview_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{id}/share_links/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description View share links for the document */
        get: operations["document_share_links"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{id}/suggestions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description View suggestions for the document */
        get: operations["documents_suggestions_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{id}/thumb/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description View the document thumbnail */
        get: operations["documents_thumb_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/bulk_download/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["documents_bulk_download_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/bulk_edit/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Perform a bulk edit operation on a list of documents */
        post: operations["bulk_edit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/next_asn/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get the next available Archive Serial Number (ASN) for a new document */
        get: operations["documents_next_asn_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/post_document/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Upload a document via the API */
        post: operations["documents_post_document_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/selection_data/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Get selection data for the selected documents */
        post: operations["documents_selection_data_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/groups/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["groups_list"];
        put?: never;
        post: operations["groups_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/groups/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["groups_retrieve"];
        put: operations["groups_update"];
        post?: never;
        delete: operations["groups_destroy"];
        options?: never;
        head?: never;
        patch: operations["groups_partial_update"];
        trace?: never;
    };
    "/api/logs/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Logs view */
        get: operations["logs_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/logs/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Single log view */
        get: operations["retrieve_log"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mail_accounts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["mail_accounts_list"];
        put?: never;
        post: operations["mail_accounts_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mail_accounts/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["mail_accounts_retrieve"];
        put: operations["mail_accounts_update"];
        post?: never;
        delete: operations["mail_accounts_destroy"];
        options?: never;
        head?: never;
        patch: operations["mail_accounts_partial_update"];
        trace?: never;
    };
    "/api/mail_accounts/{id}/process/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Manually process the selected mail account for new messages. */
        post: operations["mail_account_process"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mail_accounts/test/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Test a mail account */
        post: operations["mail_account_test"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mail_rules/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["mail_rules_list"];
        put?: never;
        post: operations["mail_rules_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mail_rules/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["mail_rules_retrieve"];
        put: operations["mail_rules_update"];
        post?: never;
        delete: operations["mail_rules_destroy"];
        options?: never;
        head?: never;
        patch: operations["mail_rules_partial_update"];
        trace?: never;
    };
    "/api/oauth/callback/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Callback view for OAuth2 authentication */
        get: operations["oauth_callback_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/profile/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description User profile view, only available when logged in */
        get: operations["profile_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description User profile view, only available when logged in */
        patch: operations["profile_partial_update"];
        trace?: never;
    };
    "/api/profile/disconnect_social_account/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Disconnects a social account provider from the user account */
        post: operations["profile_disconnect_social_account_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/profile/generate_auth_token/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Generates (or re-generates) an auth token, requires a logged in user
         *     unlike the default DRF endpoint */
        post: operations["profile_generate_auth_token_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/profile/social_account_providers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List of social account providers */
        get: operations["profile_social_account_providers_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/profile/totp/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Generates a new TOTP secret and returns the URL and SVG */
        get: operations["profile_totp_retrieve"];
        put?: never;
        /** @description Validates a TOTP code and activates the TOTP authenticator */
        post: operations["profile_totp_create"];
        /** @description Deactivates the TOTP authenticator */
        delete: operations["profile_totp_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/remote_version/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get the current version of the Paperless-NGX server */
        get: operations["remote_version_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/saved_views/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["saved_views_list"];
        put?: never;
        post: operations["saved_views_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/saved_views/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["saved_views_retrieve"];
        put: operations["saved_views_update"];
        post?: never;
        delete: operations["saved_views_destroy"];
        options?: never;
        head?: never;
        patch: operations["saved_views_partial_update"];
        trace?: never;
    };
    "/api/search/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Global search */
        get: operations["search_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search/autocomplete/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all available tags */
        get: operations["search_autocomplete_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/share_links/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["share_links_list"];
        put?: never;
        post: operations["share_links_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/share_links/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["share_links_retrieve"];
        put: operations["share_links_update"];
        post?: never;
        delete: operations["share_links_destroy"];
        options?: never;
        head?: never;
        patch: operations["share_links_partial_update"];
        trace?: never;
    };
    "/api/statistics/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get statistics for the current user */
        get: operations["statistics_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/status/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get the current system status of the Paperless-NGX server */
        get: operations["status_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/storage_paths/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["storage_paths_list"];
        put?: never;
        post: operations["storage_paths_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/storage_paths/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["storage_paths_retrieve"];
        put: operations["storage_paths_update"];
        post?: never;
        /** @description When a storage path is deleted, see if documents
         *     using it require a rename/move */
        delete: operations["storage_paths_destroy"];
        options?: never;
        head?: never;
        patch: operations["storage_paths_partial_update"];
        trace?: never;
    };
    "/api/storage_paths/test/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Test storage path against a document */
        post: operations["storage_paths_test_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tags/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["tags_list"];
        put?: never;
        post: operations["tags_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tags/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["tags_retrieve"];
        put: operations["tags_update"];
        post?: never;
        delete: operations["tags_destroy"];
        options?: never;
        head?: never;
        patch: operations["tags_partial_update"];
        trace?: never;
    };
    "/api/tasks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["tasks_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["tasks_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/acknowledge/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Acknowledge a list of tasks */
        post: operations["acknowledge_tasks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/run/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["tasks_run_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["token_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/trash/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["trash_list"];
        put?: never;
        post: operations["trash_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ui_settings/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ui_settings_retrieve"];
        put?: never;
        post: operations["ui_settings_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["users_list"];
        put?: never;
        post: operations["users_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["users_retrieve"];
        put: operations["users_update"];
        post?: never;
        delete: operations["users_destroy"];
        options?: never;
        head?: never;
        patch: operations["users_partial_update"];
        trace?: never;
    };
    "/api/users/{id}/deactivate_totp/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["users_deactivate_totp_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflow_actions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["workflow_actions_list"];
        put?: never;
        post: operations["workflow_actions_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflow_actions/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["workflow_actions_retrieve"];
        put: operations["workflow_actions_update"];
        post?: never;
        delete: operations["workflow_actions_destroy"];
        options?: never;
        head?: never;
        patch: operations["workflow_actions_partial_update"];
        trace?: never;
    };
    "/api/workflow_triggers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["workflow_triggers_list"];
        put?: never;
        post: operations["workflow_triggers_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflow_triggers/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["workflow_triggers_retrieve"];
        put: operations["workflow_triggers_update"];
        post?: never;
        delete: operations["workflow_triggers_destroy"];
        options?: never;
        head?: never;
        patch: operations["workflow_triggers_partial_update"];
        trace?: never;
    };
    "/api/workflows/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["workflows_list"];
        put?: never;
        post: operations["workflows_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["workflows_retrieve"];
        put: operations["workflows_update"];
        post?: never;
        delete: operations["workflows_destroy"];
        options?: never;
        head?: never;
        patch: operations["workflows_partial_update"];
        trace?: never;
    };
}
interface components {
    schemas: {
        /**
         * @description * `1` - IMAP
         *     * `2` - Gmail OAuth
         *     * `3` - Outlook OAuth
         * @enum {integer}
         */
        AccountTypeEnum: 1 | 2 | 3;
        AcknowledgeTasks: {
            result: number;
        };
        Actor: {
            id: number;
            username: string;
        };
        ApplicationConfiguration: {
            readonly id: number;
            user_args: unknown;
            barcode_tag_mapping: unknown;
            /** Sets the output PDF type */
            output_type?: (components["schemas"]["OutputTypeEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Do OCR from page 1 to this value */
            pages?: number | null;
            /** Do OCR using these languages */
            language?: string | null;
            /** Sets the OCR mode */
            mode?: (components["schemas"]["ModeEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Controls the generation of an archive file */
            skip_archive_file?: (components["schemas"]["SkipArchiveFileEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Sets image DPI fallback value */
            image_dpi?: number | null;
            /** Controls the unpaper cleaning */
            unpaper_clean?: (components["schemas"]["UnpaperCleanEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Enables deskew */
            deskew?: boolean | null;
            /** Enables page rotation */
            rotate_pages?: boolean | null;
            /**
             * Sets the threshold for rotation of pages
             * Format: double
             */
            rotate_pages_threshold?: number | null;
            /**
             * Sets the maximum image size for decompression
             * Format: double
             */
            max_image_pixels?: number | null;
            /** Sets the Ghostscript color conversion strategy */
            color_conversion_strategy?: (components["schemas"]["ColorConversionStrategyEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Application title */
            app_title?: string | null;
            /**
             * Application logo
             * Format: uri
             */
            app_logo?: string | null;
            /** Enables barcode scanning */
            barcodes_enabled?: boolean | null;
            /** Enables barcode TIFF support */
            barcode_enable_tiff_support?: boolean | null;
            /** Sets the barcode string */
            barcode_string?: string | null;
            /** Retains split pages */
            barcode_retain_split_pages?: boolean | null;
            /** Enables ASN barcode */
            barcode_enable_asn?: boolean | null;
            /** Sets the ASN barcode prefix */
            barcode_asn_prefix?: string | null;
            /**
             * Sets the barcode upscale factor
             * Format: double
             */
            barcode_upscale?: number | null;
            /** Sets the barcode DPI */
            barcode_dpi?: number | null;
            /** Sets the maximum pages for barcode */
            barcode_max_pages?: number | null;
            /** Enables tag barcode */
            barcode_enable_tag?: boolean | null;
        };
        ApplicationConfigurationRequest: {
            user_args: unknown;
            barcode_tag_mapping: unknown;
            /** Sets the output PDF type */
            output_type?: (components["schemas"]["OutputTypeEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Do OCR from page 1 to this value */
            pages?: number | null;
            /** Do OCR using these languages */
            language?: string | null;
            /** Sets the OCR mode */
            mode?: (components["schemas"]["ModeEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Controls the generation of an archive file */
            skip_archive_file?: (components["schemas"]["SkipArchiveFileEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Sets image DPI fallback value */
            image_dpi?: number | null;
            /** Controls the unpaper cleaning */
            unpaper_clean?: (components["schemas"]["UnpaperCleanEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Enables deskew */
            deskew?: boolean | null;
            /** Enables page rotation */
            rotate_pages?: boolean | null;
            /**
             * Sets the threshold for rotation of pages
             * Format: double
             */
            rotate_pages_threshold?: number | null;
            /**
             * Sets the maximum image size for decompression
             * Format: double
             */
            max_image_pixels?: number | null;
            /** Sets the Ghostscript color conversion strategy */
            color_conversion_strategy?: (components["schemas"]["ColorConversionStrategyEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Application title */
            app_title?: string | null;
            /**
             * Application logo
             * Format: binary
             */
            app_logo?: string | null;
            /** Enables barcode scanning */
            barcodes_enabled?: boolean | null;
            /** Enables barcode TIFF support */
            barcode_enable_tiff_support?: boolean | null;
            /** Sets the barcode string */
            barcode_string?: string | null;
            /** Retains split pages */
            barcode_retain_split_pages?: boolean | null;
            /** Enables ASN barcode */
            barcode_enable_asn?: boolean | null;
            /** Sets the ASN barcode prefix */
            barcode_asn_prefix?: string | null;
            /**
             * Sets the barcode upscale factor
             * Format: double
             */
            barcode_upscale?: number | null;
            /** Sets the barcode DPI */
            barcode_dpi?: number | null;
            /** Sets the maximum pages for barcode */
            barcode_max_pages?: number | null;
            /** Enables tag barcode */
            barcode_enable_tag?: boolean | null;
        };
        /**
         * @description * `1` - Do not assign a correspondent
         *     * `2` - Use mail address
         *     * `3` - Use name (or mail address if not available)
         *     * `4` - Use correspondent selected below
         * @enum {integer}
         */
        AssignCorrespondentFromEnum: 1 | 2 | 3 | 4;
        /**
         * @description * `1` - Use subject as title
         *     * `2` - Use attachment filename as title
         *     * `3` - Do not assign title from rule
         * @enum {integer}
         */
        AssignTitleFromEnum: 1 | 2 | 3;
        /**
         * @description * `1` - Only process attachments.
         *     * `2` - Process all files, including 'inline' attachments.
         * @enum {integer}
         */
        AttachmentTypeEnum: 1 | 2;
        BasicUser: {
            readonly id: number;
            /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
            username: string;
            first_name?: string;
            last_name?: string;
        };
        BasicUserRequest: {
            /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
            username: string;
            first_name?: string;
            last_name?: string;
        };
        /** @enum {unknown} */
        BlankEnum: "";
        BulkDownload: {
            /** @default archive */
            content: components["schemas"]["ContentEnum"];
            /** @default none */
            compression: components["schemas"]["CompressionEnum"];
            /** @default false */
            follow_formatting: boolean;
        };
        BulkDownloadRequest: {
            documents: number[];
            /** @default archive */
            content: components["schemas"]["ContentEnum"];
            /** @default none */
            compression: components["schemas"]["CompressionEnum"];
            /** @default false */
            follow_formatting: boolean;
        };
        BulkEditDocumentsResult: {
            result: string;
        };
        BulkEditObjectsRequest: {
            objects: number[];
            object_type: components["schemas"]["ObjectTypeEnum"];
            operation: components["schemas"]["OperationEnum"];
            owner?: number | null;
            /** Set permissions */
            permissions?: {
                [key: string]: unknown;
            };
            /** @default false */
            merge: boolean;
        };
        BulkEditRequest: {
            documents: number[];
            method: components["schemas"]["MethodEnum"];
            /** @default {} */
            parameters: {
                [key: string]: unknown;
            };
        };
        BulkEditResult: {
            result: string;
        };
        Classifier: {
            status: string;
            error: string;
            /** Format: date-time */
            last_trained: string;
        };
        /**
         * @description * `LeaveColorUnchanged` - LeaveColorUnchanged
         *     * `RGB` - RGB
         *     * `UseDeviceIndependentColor` - UseDeviceIndependentColor
         *     * `Gray` - Gray
         *     * `CMYK` - CMYK
         * @enum {string}
         */
        ColorConversionStrategyEnum: "LeaveColorUnchanged" | "RGB" | "UseDeviceIndependentColor" | "Gray" | "CMYK";
        /**
         * @description * `none` - none
         *     * `deflated` - deflated
         *     * `bzip2` - bzip2
         *     * `lzma` - lzma
         * @enum {string}
         */
        CompressionEnum: "none" | "deflated" | "bzip2" | "lzma";
        /**
         * @description * `1` - Only process attachments.
         *     * `2` - Process full Mail (with embedded attachments in file) as .eml
         *     * `3` - Process full Mail (with embedded attachments in file) as .eml + process attachments as separate documents
         * @enum {integer}
         */
        ConsumptionScopeEnum: 1 | 2 | 3;
        /**
         * @description * `archive` - archive
         *     * `originals` - originals
         *     * `both` - both
         * @enum {string}
         */
        ContentEnum: "archive" | "originals" | "both";
        Correspondent: {
            readonly id: number;
            readonly slug: string;
            name: string;
            match?: string;
            matching_algorithm?: components["schemas"]["MatchingAlgorithm"];
            is_insensitive?: boolean;
            readonly document_count: number;
            /** Format: date */
            readonly last_correspondence: string;
            owner?: number | null;
            readonly permissions: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
            readonly user_can_change: boolean;
        };
        CorrespondentCounts: {
            id: number;
            document_count: number;
        };
        CorrespondentRequest: {
            name: string;
            match?: string;
            matching_algorithm?: components["schemas"]["MatchingAlgorithm"];
            is_insensitive?: boolean;
            owner?: number | null;
            set_permissions?: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
        };
        CustomField: {
            readonly id: number;
            name: string;
            data_type: components["schemas"]["DataTypeEnum"];
            /** @description Extra data for the custom field, such as select options */
            extra_data?: unknown;
            readonly document_count: number;
        };
        CustomFieldCounts: {
            id: number;
            document_count: number;
        };
        CustomFieldInstance: {
            /** @description Given the *incoming* primitive data, return the value for this field
             *     that should be validated and transformed to a native value. */
            value: (string | number | {
                [key: string]: unknown;
            }) | null;
            field: number;
        };
        CustomFieldInstanceRequest: {
            /** @description Given the *incoming* primitive data, return the value for this field
             *     that should be validated and transformed to a native value. */
            value: (string | number | {
                [key: string]: unknown;
            }) | null;
            field: number;
        };
        CustomFieldRequest: {
            name: string;
            data_type: components["schemas"]["DataTypeEnum"];
            /** @description Extra data for the custom field, such as select options */
            extra_data?: unknown;
        };
        /**
         * @description * `string` - string
         *     * `url` - url
         *     * `date` - date
         *     * `boolean` - boolean
         *     * `integer` - integer
         *     * `float` - float
         *     * `monetary` - monetary
         *     * `documentlink` - documentlink
         *     * `select` - select
         * @enum {string}
         */
        DataTypeEnum: "string" | "url" | "date" | "boolean" | "integer" | "float" | "monetary" | "documentlink" | "select";
        Database: {
            type: string;
            url: string;
            status: string;
            error: string;
            migration_status: components["schemas"]["MigrationStatus"];
        };
        /**
         * @description * `table` - Table
         *     * `smallCards` - Small Cards
         *     * `largeCards` - Large Cards
         * @enum {string}
         */
        DisplayModeEnum: "table" | "smallCards" | "largeCards";
        /** @description Adds update nested feature */
        Document: {
            readonly id: number;
            correspondent: number | null;
            document_type: number | null;
            storage_path: number | null;
            title?: string;
            /** @description The raw, text-only data of the document. This field is primarily used for searching. */
            content?: string;
            tags: number[];
            /** Format: date */
            created?: string;
            /**
             * Format: date
             * @deprecated
             */
            created_date?: string;
            /** Format: date-time */
            readonly modified: string;
            /** Format: date-time */
            readonly added: string;
            /** Format: date-time */
            deleted_at?: string | null;
            /**
             * Format: int64
             * @description The position of this document in your physical document archive.
             */
            archive_serial_number?: number | null;
            readonly original_file_name: string | null;
            readonly archived_file_name: string | null;
            owner?: number | null;
            readonly permissions: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
            readonly user_can_change: boolean;
            readonly is_shared_by_requester: boolean;
            readonly notes: components["schemas"]["Notes"][];
            custom_fields?: components["schemas"]["CustomFieldInstance"][];
            readonly page_count: number | null;
            readonly mime_type: string;
        };
        DocumentListRequest: {
            documents: number[];
        };
        /** @description Adds update nested feature */
        DocumentRequest: {
            correspondent: number | null;
            document_type: number | null;
            storage_path: number | null;
            title?: string;
            /** @description The raw, text-only data of the document. This field is primarily used for searching. */
            content?: string;
            tags: number[];
            /** Format: date */
            created?: string;
            /**
             * Format: date
             * @deprecated
             */
            created_date?: string;
            /** Format: date-time */
            deleted_at?: string | null;
            /**
             * Format: int64
             * @description The position of this document in your physical document archive.
             */
            archive_serial_number?: number | null;
            owner?: number | null;
            set_permissions?: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
            custom_fields?: components["schemas"]["CustomFieldInstanceRequest"][];
            /** @default false */
            remove_inbox_tags: boolean | null;
        };
        DocumentType: {
            readonly id: number;
            readonly slug: string;
            name: string;
            match?: string;
            matching_algorithm?: components["schemas"]["MatchingAlgorithm"];
            is_insensitive?: boolean;
            readonly document_count: number;
            owner?: number | null;
            readonly permissions: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
            readonly user_can_change: boolean;
        };
        DocumentTypeCounts: {
            id: number;
            document_count: number;
        };
        DocumentTypeRequest: {
            name: string;
            match?: string;
            matching_algorithm?: components["schemas"]["MatchingAlgorithm"];
            is_insensitive?: boolean;
            owner?: number | null;
            set_permissions?: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
        };
        EmailRequestRequest: {
            addresses: string;
            subject: string;
            message: string;
            /** @default true */
            use_archive_version: boolean;
        };
        EmailResponse: {
            message: string;
        };
        /**
         * @description * `archive` - Archive
         *     * `original` - Original
         * @enum {string}
         */
        FileVersionEnum: "archive" | "original";
        Group: {
            readonly id: number;
            name: string;
            permissions: string[];
        };
        GroupRequest: {
            name: string;
            permissions: string[];
        };
        /**
         * @description * `1` - No encryption
         *     * `2` - Use SSL
         *     * `3` - Use STARTTLS
         * @enum {integer}
         */
        ImapSecurityEnum: 1 | 2 | 3;
        Index: {
            status: string;
            error: string;
            /** Format: date-time */
            last_modified: string;
        };
        LogEntry: {
            id: number;
            /** Format: date-time */
            timestamp: string;
            action: string;
            changes: {
                [key: string]: unknown;
            };
            actor: components["schemas"]["Actor"];
        };
        MailAccount: {
            readonly id: number;
            name: string;
            imap_server: string;
            /** @description This is usually 143 for unencrypted and STARTTLS connections, and 993 for SSL connections. */
            imap_port?: number | null;
            imap_security?: components["schemas"]["ImapSecurityEnum"];
            username: string;
            password: string;
            /** @description The character set to use when communicating with the mail server, such as 'UTF-8' or 'US-ASCII'. */
            character_set?: string;
            /** Is token authentication */
            is_token?: boolean;
            owner?: number | null;
            readonly user_can_change: boolean;
            account_type?: components["schemas"]["AccountTypeEnum"];
            /**
             * Format: date-time
             * @description The expiration date of the refresh token.
             */
            expiration?: string | null;
        };
        MailAccountProcessResponse: {
            /** @default OK */
            result: string;
        };
        MailAccountRequest: {
            name: string;
            imap_server: string;
            /** @description This is usually 143 for unencrypted and STARTTLS connections, and 993 for SSL connections. */
            imap_port?: number | null;
            imap_security?: components["schemas"]["ImapSecurityEnum"];
            username: string;
            password: string;
            /** @description The character set to use when communicating with the mail server, such as 'UTF-8' or 'US-ASCII'. */
            character_set?: string;
            /** Is token authentication */
            is_token?: boolean;
            owner?: number | null;
            set_permissions?: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
            account_type?: components["schemas"]["AccountTypeEnum"];
            /**
             * Format: date-time
             * @description The expiration date of the refresh token.
             */
            expiration?: string | null;
        };
        MailAccountTestResponse: {
            success: boolean;
        };
        MailRule: {
            readonly id: number;
            name: string;
            account: number;
            enabled?: boolean;
            /** @description Subfolders must be separated by a delimiter, often a dot ('.') or slash ('/'), but it varies by mail server. */
            folder?: string;
            filter_from?: string | null;
            filter_to?: string | null;
            filter_subject?: string | null;
            filter_body?: string | null;
            /**
             * Filter attachment filename inclusive
             * @description Only consume documents which entirely match this filename if specified. Wildcards such as *.pdf or *invoice* are allowed. Case insensitive.
             */
            filter_attachment_filename_include?: string | null;
            /**
             * Filter attachment filename exclusive
             * @description Do not consume documents which entirely match this filename if specified. Wildcards such as *.pdf or *invoice* are allowed. Case insensitive.
             */
            filter_attachment_filename_exclude?: string | null;
            /** @description Specified in days. */
            maximum_age?: number;
            action?: components["schemas"]["MailRuleActionEnum"];
            /** @default  */
            action_parameter: string | null;
            assign_title_from?: components["schemas"]["AssignTitleFromEnum"];
            assign_tags?: (number | null)[];
            assign_correspondent_from?: components["schemas"]["AssignCorrespondentFromEnum"];
            assign_correspondent?: number | null;
            assign_document_type?: number | null;
            /** Assign the rule owner to documents */
            assign_owner_from_rule?: boolean;
            order?: number;
            /** @description Inline attachments include embedded images, so it's best to combine this option with a filename filter.
             *
             *     * `1` - Only process attachments.
             *     * `2` - Process all files, including 'inline' attachments. */
            attachment_type?: components["schemas"]["AttachmentTypeEnum"];
            consumption_scope?: components["schemas"]["ConsumptionScopeEnum"];
            pdf_layout?: components["schemas"]["PdfLayoutEnum"];
            owner?: number | null;
            readonly user_can_change: boolean;
        };
        /**
         * @description * `1` - Delete
         *     * `2` - Move to specified folder
         *     * `3` - Mark as read, don't process read mails
         *     * `4` - Flag the mail, don't process flagged mails
         *     * `5` - Tag the mail with specified tag, don't process tagged mails
         * @enum {integer}
         */
        MailRuleActionEnum: 1 | 2 | 3 | 4 | 5;
        MailRuleRequest: {
            name: string;
            account: number;
            enabled?: boolean;
            /** @description Subfolders must be separated by a delimiter, often a dot ('.') or slash ('/'), but it varies by mail server. */
            folder?: string;
            filter_from?: string | null;
            filter_to?: string | null;
            filter_subject?: string | null;
            filter_body?: string | null;
            /**
             * Filter attachment filename inclusive
             * @description Only consume documents which entirely match this filename if specified. Wildcards such as *.pdf or *invoice* are allowed. Case insensitive.
             */
            filter_attachment_filename_include?: string | null;
            /**
             * Filter attachment filename exclusive
             * @description Do not consume documents which entirely match this filename if specified. Wildcards such as *.pdf or *invoice* are allowed. Case insensitive.
             */
            filter_attachment_filename_exclude?: string | null;
            /** @description Specified in days. */
            maximum_age?: number;
            action?: components["schemas"]["MailRuleActionEnum"];
            /** @default  */
            action_parameter: string | null;
            assign_title_from?: components["schemas"]["AssignTitleFromEnum"];
            assign_tags?: (number | null)[];
            assign_correspondent_from?: components["schemas"]["AssignCorrespondentFromEnum"];
            assign_correspondent?: number | null;
            assign_document_type?: number | null;
            /** Assign the rule owner to documents */
            assign_owner_from_rule?: boolean;
            order?: number;
            /** @description Inline attachments include embedded images, so it's best to combine this option with a filename filter.
             *
             *     * `1` - Only process attachments.
             *     * `2` - Process all files, including 'inline' attachments. */
            attachment_type?: components["schemas"]["AttachmentTypeEnum"];
            consumption_scope?: components["schemas"]["ConsumptionScopeEnum"];
            pdf_layout?: components["schemas"]["PdfLayoutEnum"];
            owner?: number | null;
            set_permissions?: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
        };
        /**
         * @description * `0` - None
         *     * `1` - Any word
         *     * `2` - All words
         *     * `3` - Exact match
         *     * `4` - Regular expression
         *     * `5` - Fuzzy word
         *     * `6` - Automatic
         * @enum {integer}
         */
        MatchingAlgorithm: 0 | 1 | 2 | 3 | 4 | 5 | 6;
        Metadata: {
            original_checksum: string;
            original_size: number;
            original_mime_type: string;
            media_filename: string;
            has_archive_version: boolean;
            original_metadata: {
                [key: string]: unknown;
            };
            archive_checksum: string;
            archive_media_filename: string;
            original_filename: string;
            archive_size: number;
            archive_metadata: {
                [key: string]: unknown;
            };
            lang: string;
        };
        /**
         * @description * `set_correspondent` - set_correspondent
         *     * `set_document_type` - set_document_type
         *     * `set_storage_path` - set_storage_path
         *     * `add_tag` - add_tag
         *     * `remove_tag` - remove_tag
         *     * `modify_tags` - modify_tags
         *     * `modify_custom_fields` - modify_custom_fields
         *     * `delete` - delete
         *     * `reprocess` - reprocess
         *     * `set_permissions` - set_permissions
         *     * `rotate` - rotate
         *     * `merge` - merge
         *     * `split` - split
         *     * `delete_pages` - delete_pages
         *     * `edit_pdf` - edit_pdf
         * @enum {string}
         */
        MethodEnum: "set_correspondent" | "set_document_type" | "set_storage_path" | "add_tag" | "remove_tag" | "modify_tags" | "modify_custom_fields" | "delete" | "reprocess" | "set_permissions" | "rotate" | "merge" | "split" | "delete_pages" | "edit_pdf";
        MigrationStatus: {
            latest_migration: string;
            unapplied_migrations: string[];
        };
        /**
         * @description * `skip` - skip
         *     * `redo` - redo
         *     * `force` - force
         *     * `skip_noarchive` - skip_noarchive
         * @enum {string}
         */
        ModeEnum: "skip" | "redo" | "force" | "skip_noarchive";
        NoteCreateRequestRequest: {
            note: string;
        };
        Notes: {
            readonly id: number;
            /**
             * Content
             * @description Note for the document
             */
            note?: string;
            /** Format: date-time */
            created?: string;
            readonly user: components["schemas"]["BasicUser"];
        };
        NotesRequest: {
            /**
             * Content
             * @description Note for the document
             */
            note?: string;
            /** Format: date-time */
            created?: string;
        };
        /** @enum {unknown} */
        NullEnum: null;
        /**
         * @description * `tags` - tags
         *     * `correspondents` - correspondents
         *     * `document_types` - document_types
         *     * `storage_paths` - storage_paths
         * @enum {string}
         */
        ObjectTypeEnum: "tags" | "correspondents" | "document_types" | "storage_paths";
        /**
         * @description * `set_permissions` - set_permissions
         *     * `delete` - delete
         * @enum {string}
         */
        OperationEnum: "set_permissions" | "delete";
        /**
         * @description * `pdf` - pdf
         *     * `pdfa` - pdfa
         *     * `pdfa-1` - pdfa-1
         *     * `pdfa-2` - pdfa-2
         *     * `pdfa-3` - pdfa-3
         * @enum {string}
         */
        OutputTypeEnum: "pdf" | "pdfa" | "pdfa-1" | "pdfa-2" | "pdfa-3";
        PaginatedCorrespondentList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Correspondent"][];
            /** @example [1, 2, 3] */
            all?: unknown[];
        };
        PaginatedCustomFieldList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["CustomField"][];
            /** @example [1, 2, 3] */
            all?: unknown[];
        };
        PaginatedDocumentList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Document"][];
            /** @example [1, 2, 3] */
            all?: unknown[];
        };
        PaginatedDocumentTypeList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["DocumentType"][];
            /** @example [1, 2, 3] */
            all?: unknown[];
        };
        PaginatedGroupList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Group"][];
            /** @example [1, 2, 3] */
            all?: unknown[];
        };
        PaginatedLogEntryList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["LogEntry"][];
            /** @example [1, 2, 3] */
            all?: unknown[];
        };
        PaginatedMailAccountList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["MailAccount"][];
            /** @example [1, 2, 3] */
            all?: unknown[];
        };
        PaginatedMailRuleList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["MailRule"][];
            /** @example [1, 2, 3] */
            all?: unknown[];
        };
        PaginatedNotesList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Notes"][];
            /** @example [1, 2, 3] */
            all?: unknown[];
        };
        PaginatedSavedViewList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["SavedView"][];
            /** @example [1, 2, 3] */
            all?: unknown[];
        };
        PaginatedShareLinkList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["ShareLink"][];
            /** @example [1, 2, 3] */
            all?: unknown[];
        };
        PaginatedStoragePathList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["StoragePath"][];
            /** @example [1, 2, 3] */
            all?: unknown[];
        };
        PaginatedTagList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Tag"][];
            /** @example [1, 2, 3] */
            all?: unknown[];
        };
        PaginatedUserList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["User"][];
            /** @example [1, 2, 3] */
            all?: unknown[];
        };
        PaginatedWorkflowActionList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["WorkflowAction"][];
            /** @example [1, 2, 3] */
            all?: unknown[];
        };
        PaginatedWorkflowList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Workflow"][];
            /** @example [1, 2, 3] */
            all?: unknown[];
        };
        PaginatedWorkflowTriggerList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["WorkflowTrigger"][];
            /** @example [1, 2, 3] */
            all?: unknown[];
        };
        PaperlessAuthToken: {
            readonly token: string;
        };
        PaperlessAuthTokenRequest: {
            username: string;
            password: string;
            /** MFA Code */
            code?: string;
        };
        PatchedApplicationConfigurationRequest: {
            user_args?: unknown;
            barcode_tag_mapping?: unknown;
            /** Sets the output PDF type */
            output_type?: (components["schemas"]["OutputTypeEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Do OCR from page 1 to this value */
            pages?: number | null;
            /** Do OCR using these languages */
            language?: string | null;
            /** Sets the OCR mode */
            mode?: (components["schemas"]["ModeEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Controls the generation of an archive file */
            skip_archive_file?: (components["schemas"]["SkipArchiveFileEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Sets image DPI fallback value */
            image_dpi?: number | null;
            /** Controls the unpaper cleaning */
            unpaper_clean?: (components["schemas"]["UnpaperCleanEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Enables deskew */
            deskew?: boolean | null;
            /** Enables page rotation */
            rotate_pages?: boolean | null;
            /**
             * Sets the threshold for rotation of pages
             * Format: double
             */
            rotate_pages_threshold?: number | null;
            /**
             * Sets the maximum image size for decompression
             * Format: double
             */
            max_image_pixels?: number | null;
            /** Sets the Ghostscript color conversion strategy */
            color_conversion_strategy?: (components["schemas"]["ColorConversionStrategyEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Application title */
            app_title?: string | null;
            /**
             * Application logo
             * Format: binary
             */
            app_logo?: string | null;
            /** Enables barcode scanning */
            barcodes_enabled?: boolean | null;
            /** Enables barcode TIFF support */
            barcode_enable_tiff_support?: boolean | null;
            /** Sets the barcode string */
            barcode_string?: string | null;
            /** Retains split pages */
            barcode_retain_split_pages?: boolean | null;
            /** Enables ASN barcode */
            barcode_enable_asn?: boolean | null;
            /** Sets the ASN barcode prefix */
            barcode_asn_prefix?: string | null;
            /**
             * Sets the barcode upscale factor
             * Format: double
             */
            barcode_upscale?: number | null;
            /** Sets the barcode DPI */
            barcode_dpi?: number | null;
            /** Sets the maximum pages for barcode */
            barcode_max_pages?: number | null;
            /** Enables tag barcode */
            barcode_enable_tag?: boolean | null;
        };
        PatchedCorrespondentRequest: {
            name?: string;
            match?: string;
            matching_algorithm?: components["schemas"]["MatchingAlgorithm"];
            is_insensitive?: boolean;
            owner?: number | null;
            set_permissions?: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
        };
        PatchedCustomFieldRequest: {
            name?: string;
            data_type?: components["schemas"]["DataTypeEnum"];
            /** @description Extra data for the custom field, such as select options */
            extra_data?: unknown;
        };
        /** @description Adds update nested feature */
        PatchedDocumentRequest: {
            correspondent?: number | null;
            document_type?: number | null;
            storage_path?: number | null;
            title?: string;
            /** @description The raw, text-only data of the document. This field is primarily used for searching. */
            content?: string;
            tags?: number[];
            /** Format: date */
            created?: string;
            /**
             * Format: date
             * @deprecated
             */
            created_date?: string;
            /** Format: date-time */
            deleted_at?: string | null;
            /**
             * Format: int64
             * @description The position of this document in your physical document archive.
             */
            archive_serial_number?: number | null;
            owner?: number | null;
            set_permissions?: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
            custom_fields?: components["schemas"]["CustomFieldInstanceRequest"][];
            /** @default false */
            remove_inbox_tags: boolean | null;
        };
        PatchedDocumentTypeRequest: {
            name?: string;
            match?: string;
            matching_algorithm?: components["schemas"]["MatchingAlgorithm"];
            is_insensitive?: boolean;
            owner?: number | null;
            set_permissions?: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
        };
        PatchedGroupRequest: {
            name?: string;
            permissions?: string[];
        };
        PatchedMailAccountRequest: {
            name?: string;
            imap_server?: string;
            /** @description This is usually 143 for unencrypted and STARTTLS connections, and 993 for SSL connections. */
            imap_port?: number | null;
            imap_security?: components["schemas"]["ImapSecurityEnum"];
            username?: string;
            password?: string;
            /** @description The character set to use when communicating with the mail server, such as 'UTF-8' or 'US-ASCII'. */
            character_set?: string;
            /** Is token authentication */
            is_token?: boolean;
            owner?: number | null;
            set_permissions?: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
            account_type?: components["schemas"]["AccountTypeEnum"];
            /**
             * Format: date-time
             * @description The expiration date of the refresh token.
             */
            expiration?: string | null;
        };
        PatchedMailRuleRequest: {
            name?: string;
            account?: number;
            enabled?: boolean;
            /** @description Subfolders must be separated by a delimiter, often a dot ('.') or slash ('/'), but it varies by mail server. */
            folder?: string;
            filter_from?: string | null;
            filter_to?: string | null;
            filter_subject?: string | null;
            filter_body?: string | null;
            /**
             * Filter attachment filename inclusive
             * @description Only consume documents which entirely match this filename if specified. Wildcards such as *.pdf or *invoice* are allowed. Case insensitive.
             */
            filter_attachment_filename_include?: string | null;
            /**
             * Filter attachment filename exclusive
             * @description Do not consume documents which entirely match this filename if specified. Wildcards such as *.pdf or *invoice* are allowed. Case insensitive.
             */
            filter_attachment_filename_exclude?: string | null;
            /** @description Specified in days. */
            maximum_age?: number;
            action?: components["schemas"]["MailRuleActionEnum"];
            /** @default  */
            action_parameter: string | null;
            assign_title_from?: components["schemas"]["AssignTitleFromEnum"];
            assign_tags?: (number | null)[];
            assign_correspondent_from?: components["schemas"]["AssignCorrespondentFromEnum"];
            assign_correspondent?: number | null;
            assign_document_type?: number | null;
            /** Assign the rule owner to documents */
            assign_owner_from_rule?: boolean;
            order?: number;
            /** @description Inline attachments include embedded images, so it's best to combine this option with a filename filter.
             *
             *     * `1` - Only process attachments.
             *     * `2` - Process all files, including 'inline' attachments. */
            attachment_type?: components["schemas"]["AttachmentTypeEnum"];
            consumption_scope?: components["schemas"]["ConsumptionScopeEnum"];
            pdf_layout?: components["schemas"]["PdfLayoutEnum"];
            owner?: number | null;
            set_permissions?: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
        };
        PatchedProfileRequest: {
            /** Format: email */
            email?: string;
            password?: string;
            first_name?: string;
            last_name?: string;
        };
        PatchedSavedViewRequest: {
            name?: string;
            show_on_dashboard?: boolean;
            show_in_sidebar?: boolean;
            sort_field?: string | null;
            sort_reverse?: boolean;
            filter_rules?: components["schemas"]["SavedViewFilterRuleRequest"][];
            /** View page size */
            page_size?: number | null;
            /** View display mode */
            display_mode?: (components["schemas"]["DisplayModeEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Document display fields */
            display_fields?: unknown;
            owner?: number | null;
        };
        PatchedShareLinkRequest: {
            /** Format: date-time */
            expiration?: string | null;
            document?: number;
            file_version?: components["schemas"]["FileVersionEnum"];
        };
        PatchedStoragePathRequest: {
            name?: string;
            path?: string;
            match?: string;
            matching_algorithm?: components["schemas"]["MatchingAlgorithm"];
            is_insensitive?: boolean;
            owner?: number | null;
            set_permissions?: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
        };
        PatchedTagRequest: {
            name?: string;
            color?: string;
            match?: string;
            matching_algorithm?: components["schemas"]["MatchingAlgorithm"];
            is_insensitive?: boolean;
            /** @description Marks this tag as an inbox tag: All newly consumed documents will be tagged with inbox tags. */
            is_inbox_tag?: boolean;
            owner?: number | null;
            set_permissions?: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
        };
        PatchedUserRequest: {
            /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
            username?: string;
            /**
             * Email address
             * Format: email
             */
            email?: string;
            password?: string;
            first_name?: string;
            last_name?: string;
            /** Format: date-time */
            date_joined?: string;
            /**
             * Staff status
             * @description Designates whether the user can log into this admin site.
             */
            is_staff?: boolean;
            /**
             * Active
             * @description Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
             */
            is_active?: boolean;
            /**
             * Superuser status
             * @description Designates that this user has all permissions without explicitly assigning them.
             */
            is_superuser?: boolean;
            /** @description The groups this user belongs to. A user will get all permissions granted to each of their groups. */
            groups?: number[];
            user_permissions?: string[];
        };
        PatchedWorkflowActionRequest: {
            id?: number | null;
            /** Workflow Action Type */
            type?: components["schemas"]["WorkflowActionTypeEnum"];
            /** @description Assign a document title, can include some placeholders, see documentation. */
            assign_title?: string | null;
            assign_tags?: (number | null)[];
            assign_correspondent?: number | null;
            assign_document_type?: number | null;
            assign_storage_path?: number | null;
            /** Assign this owner */
            assign_owner?: number | null;
            /** Grant view permissions to these users */
            assign_view_users?: number[];
            /** Grant view permissions to these groups */
            assign_view_groups?: number[];
            /** Grant change permissions to these users */
            assign_change_users?: number[];
            /** Grant change permissions to these groups */
            assign_change_groups?: number[];
            /** Assign these custom fields */
            assign_custom_fields?: number[];
            /**
             * Custom field values
             * @description Optional values to assign to the custom fields.
             */
            assign_custom_fields_values?: unknown;
            remove_all_tags?: boolean;
            /** Remove these tag(s) */
            remove_tags?: number[];
            remove_all_correspondents?: boolean;
            /** Remove these correspondent(s) */
            remove_correspondents?: number[];
            remove_all_document_types?: boolean;
            /** Remove these document type(s) */
            remove_document_types?: number[];
            remove_all_storage_paths?: boolean;
            /** Remove these storage path(s) */
            remove_storage_paths?: number[];
            /** Remove these custom fields */
            remove_custom_fields?: number[];
            remove_all_custom_fields?: boolean;
            remove_all_owners?: boolean;
            /** Remove these owner(s) */
            remove_owners?: number[];
            remove_all_permissions?: boolean;
            /** Remove view permissions for these users */
            remove_view_users?: number[];
            /** Remove view permissions for these groups */
            remove_view_groups?: number[];
            /** Remove change permissions for these users */
            remove_change_users?: number[];
            /** Remove change permissions for these groups */
            remove_change_groups?: number[];
            email?: components["schemas"]["WorkflowActionEmailRequest"] | null;
            webhook?: components["schemas"]["WorkflowActionWebhookRequest"] | null;
        };
        PatchedWorkflowRequest: {
            name?: string;
            order?: number;
            enabled?: boolean;
            triggers?: components["schemas"]["WorkflowTriggerRequest"][];
            actions?: components["schemas"]["WorkflowActionRequest"][];
        };
        PatchedWorkflowTriggerRequest: {
            id?: number | null;
            /** @default [
             *       1,
             *       2,
             *       3
             *     ] */
            sources: components["schemas"]["SourcesEnum"][];
            /** Trigger Type */
            type?: components["schemas"]["WorkflowTriggerTypeEnum"];
            /** @description Only consume documents with a path that matches this if specified. Wildcards specified as * are allowed. Case insensitive. */
            filter_path?: string | null;
            /** @description Only consume documents which entirely match this filename if specified. Wildcards such as *.pdf or *invoice* are allowed. Case insensitive. */
            filter_filename?: string | null;
            /** Filter documents from this mail rule */
            filter_mailrule?: number | null;
            matching_algorithm?: components["schemas"]["WorkflowTriggerMatchingAlgorithmEnum"];
            match?: string;
            is_insensitive?: boolean;
            /** Has these tag(s) */
            filter_has_tags?: number[];
            /** Has this correspondent */
            filter_has_correspondent?: number | null;
            /** Has this document type */
            filter_has_document_type?: number | null;
            /** @description The number of days to offset the schedule trigger by. */
            schedule_offset_days?: number;
            /** @description If the schedule should be recurring. */
            schedule_is_recurring?: boolean;
            /**
             * Schedule recurring delay in days
             * @description The number of days between recurring schedule triggers.
             */
            schedule_recurring_interval_days?: number;
            /** @description The field to check for a schedule trigger.
             *
             *     * `added` - Added
             *     * `created` - Created
             *     * `modified` - Modified
             *     * `custom_field` - Custom Field */
            schedule_date_field?: components["schemas"]["ScheduleDateFieldEnum"];
            schedule_date_custom_field?: number | null;
        };
        /**
         * @description * `0` - System default
         *     * `1` - Text, then HTML
         *     * `2` - HTML, then text
         *     * `3` - HTML only
         *     * `4` - Text only
         * @enum {integer}
         */
        PdfLayoutEnum: 0 | 1 | 2 | 3 | 4;
        PostDocumentRequest: {
            /** Format: date-time */
            created?: string | null;
            /** Format: binary */
            document: string;
            title?: string;
            correspondent?: number | null;
            document_type?: number | null;
            storage_path?: number | null;
            tags?: number[];
            /**
             * ASN
             * Format: int64
             */
            archive_serial_number?: number;
            custom_fields?: number[];
            /** Documents are from Paperless-ngx WebUI */
            from_webui?: boolean;
        };
        Profile: {
            /** Format: email */
            email?: string;
            password?: string;
            first_name?: string;
            last_name?: string;
            readonly auth_token: string;
            readonly social_accounts: components["schemas"]["SocialAccount"][];
            readonly has_usable_password: boolean;
            readonly is_mfa_enabled: boolean;
        };
        /**
         * @description * `0` - title contains
         *     * `1` - content contains
         *     * `2` - ASN is
         *     * `3` - correspondent is
         *     * `4` - document type is
         *     * `5` - is in inbox
         *     * `6` - has tag
         *     * `7` - has any tag
         *     * `8` - created before
         *     * `9` - created after
         *     * `10` - created year is
         *     * `11` - created month is
         *     * `12` - created day is
         *     * `13` - added before
         *     * `14` - added after
         *     * `15` - modified before
         *     * `16` - modified after
         *     * `17` - does not have tag
         *     * `18` - does not have ASN
         *     * `19` - title or content contains
         *     * `20` - fulltext query
         *     * `21` - more like this
         *     * `22` - has tags in
         *     * `23` - ASN greater than
         *     * `24` - ASN less than
         *     * `25` - storage path is
         *     * `26` - has correspondent in
         *     * `27` - does not have correspondent in
         *     * `28` - has document type in
         *     * `29` - does not have document type in
         *     * `30` - has storage path in
         *     * `31` - does not have storage path in
         *     * `32` - owner is
         *     * `33` - has owner in
         *     * `34` - does not have owner
         *     * `35` - does not have owner in
         *     * `36` - has custom field value
         *     * `37` - is shared by me
         *     * `38` - has custom fields
         *     * `39` - has custom field in
         *     * `40` - does not have custom field in
         *     * `41` - does not have custom field
         *     * `42` - custom fields query
         *     * `43` - created to
         *     * `44` - created from
         *     * `45` - added to
         *     * `46` - added from
         *     * `47` - mime type is
         * @enum {integer}
         */
        RuleTypeEnum: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47;
        SanityCheck: {
            status: string;
            error: string;
            /** Format: date-time */
            last_run: string;
        };
        SavedView: {
            readonly id: number;
            name: string;
            show_on_dashboard: boolean;
            show_in_sidebar: boolean;
            sort_field?: string | null;
            sort_reverse?: boolean;
            filter_rules: components["schemas"]["SavedViewFilterRule"][];
            /** View page size */
            page_size?: number | null;
            /** View display mode */
            display_mode?: (components["schemas"]["DisplayModeEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Document display fields */
            display_fields?: unknown;
            owner?: number | null;
            readonly user_can_change: boolean;
        };
        SavedViewFilterRule: {
            rule_type: components["schemas"]["RuleTypeEnum"];
            value?: string | null;
        };
        SavedViewFilterRuleRequest: {
            rule_type: components["schemas"]["RuleTypeEnum"];
            value?: string | null;
        };
        SavedViewRequest: {
            name: string;
            show_on_dashboard: boolean;
            show_in_sidebar: boolean;
            sort_field?: string | null;
            sort_reverse?: boolean;
            filter_rules: components["schemas"]["SavedViewFilterRuleRequest"][];
            /** View page size */
            page_size?: number | null;
            /** View display mode */
            display_mode?: (components["schemas"]["DisplayModeEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Document display fields */
            display_fields?: unknown;
            owner?: number | null;
        };
        /**
         * @description * `added` - Added
         *     * `created` - Created
         *     * `modified` - Modified
         *     * `custom_field` - Custom Field
         * @enum {string}
         */
        ScheduleDateFieldEnum: "added" | "created" | "modified" | "custom_field";
        SearchResult: {
            total: number;
            documents: components["schemas"]["Document"][];
            saved_views: components["schemas"]["SavedView"][];
            tags: components["schemas"]["Tag"][];
            correspondents: components["schemas"]["Correspondent"][];
            document_types: components["schemas"]["DocumentType"][];
            storage_paths: components["schemas"]["StoragePath"][];
            users: components["schemas"]["User"][];
            groups: components["schemas"]["Group"][];
            mail_rules: components["schemas"]["MailRule"][];
            mail_accounts: components["schemas"]["MailAccount"][];
            workflows: components["schemas"]["Workflow"][];
            custom_fields: components["schemas"]["CustomField"][];
        };
        SelectionData: {
            selected_correspondents: components["schemas"]["CorrespondentCounts"][];
            selected_tags: components["schemas"]["TagCounts"][];
            selected_document_types: components["schemas"]["DocumentTypeCounts"][];
            selected_storage_paths: components["schemas"]["StoragePathCounts"][];
            selected_custom_fields: components["schemas"]["CustomFieldCounts"][];
        };
        ShareLink: {
            readonly id: number;
            /** Format: date-time */
            readonly created: string;
            /** Format: date-time */
            expiration?: string | null;
            readonly slug: string;
            document?: number;
            file_version?: components["schemas"]["FileVersionEnum"];
        };
        ShareLinkRequest: {
            /** Format: date-time */
            expiration?: string | null;
            document?: number;
            file_version?: components["schemas"]["FileVersionEnum"];
        };
        /**
         * @description * `never` - never
         *     * `with_text` - with_text
         *     * `always` - always
         * @enum {string}
         */
        SkipArchiveFileEnum: "never" | "with_text" | "always";
        SocialAccount: {
            readonly id: number;
            provider: string;
            readonly name: string;
        };
        SocialAccountRequest: {
            provider: string;
        };
        /**
         * @description * `1` - Consume Folder
         *     * `2` - Api Upload
         *     * `3` - Mail Fetch
         *     * `4` - Web UI
         * @enum {integer}
         */
        SourcesEnum: 1 | 2 | 3 | 4;
        /**
         * @description * `FAILURE` - FAILURE
         *     * `PENDING` - PENDING
         *     * `RECEIVED` - RECEIVED
         *     * `RETRY` - RETRY
         *     * `REVOKED` - REVOKED
         *     * `STARTED` - STARTED
         *     * `SUCCESS` - SUCCESS
         * @enum {string}
         */
        StatusEnum: "FAILURE" | "PENDING" | "RECEIVED" | "RETRY" | "REVOKED" | "STARTED" | "SUCCESS";
        Storage: {
            total: number;
            available: number;
        };
        StoragePath: {
            readonly id: number;
            readonly slug: string;
            name: string;
            path: string;
            match?: string;
            matching_algorithm?: components["schemas"]["MatchingAlgorithm"];
            is_insensitive?: boolean;
            readonly document_count: number;
            owner?: number | null;
            readonly user_can_change: boolean;
        };
        StoragePathCounts: {
            id: number;
            document_count: number;
        };
        StoragePathRequest: {
            name: string;
            path: string;
            match?: string;
            matching_algorithm?: components["schemas"]["MatchingAlgorithm"];
            is_insensitive?: boolean;
            owner?: number | null;
            set_permissions?: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
        };
        Suggestions: {
            correspondents: number[];
            tags: number[];
            document_types: number[];
            storage_paths: number[];
            dates: string[];
        };
        SystemStatus: {
            pngx_version: string;
            server_os: string;
            install_type: string;
            storage: components["schemas"]["Storage"];
            database: components["schemas"]["Database"];
            tasks: components["schemas"]["Tasks"];
            index: components["schemas"]["Index"];
            classifier: components["schemas"]["Classifier"];
            sanity_check: components["schemas"]["SanityCheck"];
        };
        Tag: {
            readonly id: number;
            readonly slug: string;
            name: string;
            color?: string;
            readonly text_color: string;
            match?: string;
            matching_algorithm?: components["schemas"]["MatchingAlgorithm"];
            is_insensitive?: boolean;
            /** @description Marks this tag as an inbox tag: All newly consumed documents will be tagged with inbox tags. */
            is_inbox_tag?: boolean;
            readonly document_count: number;
            owner?: number | null;
            readonly user_can_change: boolean;
        };
        TagCounts: {
            id: number;
            document_count: number;
        };
        TagRequest: {
            name: string;
            color?: string;
            match?: string;
            matching_algorithm?: components["schemas"]["MatchingAlgorithm"];
            is_insensitive?: boolean;
            /** @description Marks this tag as an inbox tag: All newly consumed documents will be tagged with inbox tags. */
            is_inbox_tag?: boolean;
            owner?: number | null;
            set_permissions?: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
        };
        /**
         * @description * `consume_file` - Consume File
         *     * `train_classifier` - Train Classifier
         *     * `check_sanity` - Check Sanity
         *     * `index_optimize` - Index Optimize
         * @enum {string}
         */
        TaskNameEnum: "consume_file" | "train_classifier" | "check_sanity" | "index_optimize";
        Tasks: {
            redis_url: string;
            redis_status: string;
            redis_error: string;
            celery_status: string;
        };
        TasksView: {
            readonly id: number;
            /** @description Celery ID for the Task that was run */
            task_id: string;
            /** @description Name of the task that was run
             *
             *     * `consume_file` - Consume File
             *     * `train_classifier` - Train Classifier
             *     * `check_sanity` - Check Sanity
             *     * `index_optimize` - Index Optimize */
            task_name?: (components["schemas"]["TaskNameEnum"] | components["schemas"]["NullEnum"]) | null;
            /**
             * Task Filename
             * @description Name of the file which the Task was run for
             */
            task_file_name?: string | null;
            /**
             * Created DateTime
             * Format: date-time
             * @description Datetime field when the task result was created in UTC
             */
            date_created?: string | null;
            /**
             * Completed DateTime
             * Format: date-time
             * @description Datetime field when the task was completed in UTC
             */
            date_done?: string | null;
            /**
             * Task Type
             * @description The type of task that was run
             *
             *     * `auto_task` - Auto Task
             *     * `scheduled_task` - Scheduled Task
             *     * `manual_task` - Manual Task
             */
            type?: components["schemas"]["TasksViewTypeEnum"];
            /**
             * Task State
             * @description Current state of the task being run
             *
             *     * `FAILURE` - FAILURE
             *     * `PENDING` - PENDING
             *     * `RECEIVED` - RECEIVED
             *     * `RETRY` - RETRY
             *     * `REVOKED` - REVOKED
             *     * `STARTED` - STARTED
             *     * `SUCCESS` - SUCCESS
             */
            status?: components["schemas"]["StatusEnum"];
            /**
             * Result Data
             * @description The data returned by the task
             */
            result?: string | null;
            /** @description If the task is acknowledged via the frontend or API */
            acknowledged?: boolean;
            readonly related_document: string | null;
            owner?: number | null;
        };
        TasksViewRequest: {
            /** @description Celery ID for the Task that was run */
            task_id: string;
            /** @description Name of the task that was run
             *
             *     * `consume_file` - Consume File
             *     * `train_classifier` - Train Classifier
             *     * `check_sanity` - Check Sanity
             *     * `index_optimize` - Index Optimize */
            task_name?: (components["schemas"]["TaskNameEnum"] | components["schemas"]["NullEnum"]) | null;
            /**
             * Task Filename
             * @description Name of the file which the Task was run for
             */
            task_file_name?: string | null;
            /**
             * Created DateTime
             * Format: date-time
             * @description Datetime field when the task result was created in UTC
             */
            date_created?: string | null;
            /**
             * Completed DateTime
             * Format: date-time
             * @description Datetime field when the task was completed in UTC
             */
            date_done?: string | null;
            /**
             * Task Type
             * @description The type of task that was run
             *
             *     * `auto_task` - Auto Task
             *     * `scheduled_task` - Scheduled Task
             *     * `manual_task` - Manual Task
             */
            type?: components["schemas"]["TasksViewTypeEnum"];
            /**
             * Task State
             * @description Current state of the task being run
             *
             *     * `FAILURE` - FAILURE
             *     * `PENDING` - PENDING
             *     * `RECEIVED` - RECEIVED
             *     * `RETRY` - RETRY
             *     * `REVOKED` - REVOKED
             *     * `STARTED` - STARTED
             *     * `SUCCESS` - SUCCESS
             */
            status?: components["schemas"]["StatusEnum"];
            /**
             * Result Data
             * @description The data returned by the task
             */
            result?: string | null;
            /** @description If the task is acknowledged via the frontend or API */
            acknowledged?: boolean;
            owner?: number | null;
        };
        /**
         * @description * `auto_task` - Auto Task
         *     * `scheduled_task` - Scheduled Task
         *     * `manual_task` - Manual Task
         * @enum {string}
         */
        TasksViewTypeEnum: "auto_task" | "scheduled_task" | "manual_task";
        /**
         * @description * `restore` - restore
         *     * `empty` - empty
         * @enum {string}
         */
        TrashActionEnum: "restore" | "empty";
        TrashRequest: {
            documents?: number[];
            action: components["schemas"]["TrashActionEnum"];
        };
        UiSettingsView: {
            readonly id: number;
            settings?: {
                [key: string]: unknown;
            } | null;
        };
        UiSettingsViewRequest: {
            settings?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * @description * `clean` - clean
         *     * `clean-final` - clean-final
         *     * `none` - none
         * @enum {string}
         */
        UnpaperCleanEnum: "clean" | "clean-final" | "none";
        User: {
            readonly id: number;
            /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
            username: string;
            /**
             * Email address
             * Format: email
             */
            email?: string;
            password?: string;
            first_name?: string;
            last_name?: string;
            /** Format: date-time */
            date_joined?: string;
            /**
             * Staff status
             * @description Designates whether the user can log into this admin site.
             */
            is_staff?: boolean;
            /**
             * Active
             * @description Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
             */
            is_active?: boolean;
            /**
             * Superuser status
             * @description Designates that this user has all permissions without explicitly assigning them.
             */
            is_superuser?: boolean;
            /** @description The groups this user belongs to. A user will get all permissions granted to each of their groups. */
            groups?: number[];
            user_permissions?: string[];
            readonly inherited_permissions: string[];
            readonly is_mfa_enabled: boolean;
        };
        UserRequest: {
            /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
            username: string;
            /**
             * Email address
             * Format: email
             */
            email?: string;
            password?: string;
            first_name?: string;
            last_name?: string;
            /** Format: date-time */
            date_joined?: string;
            /**
             * Staff status
             * @description Designates whether the user can log into this admin site.
             */
            is_staff?: boolean;
            /**
             * Active
             * @description Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
             */
            is_active?: boolean;
            /**
             * Superuser status
             * @description Designates that this user has all permissions without explicitly assigning them.
             */
            is_superuser?: boolean;
            /** @description The groups this user belongs to. A user will get all permissions granted to each of their groups. */
            groups?: number[];
            user_permissions?: string[];
        };
        Workflow: {
            readonly id: number;
            name: string;
            order?: number;
            enabled?: boolean;
            triggers: components["schemas"]["WorkflowTrigger"][];
            actions: components["schemas"]["WorkflowAction"][];
        };
        WorkflowAction: {
            id?: number | null;
            /** Workflow Action Type */
            type?: components["schemas"]["WorkflowActionTypeEnum"];
            /** @description Assign a document title, can include some placeholders, see documentation. */
            assign_title?: string | null;
            assign_tags?: (number | null)[];
            assign_correspondent?: number | null;
            assign_document_type?: number | null;
            assign_storage_path?: number | null;
            /** Assign this owner */
            assign_owner?: number | null;
            /** Grant view permissions to these users */
            assign_view_users?: number[];
            /** Grant view permissions to these groups */
            assign_view_groups?: number[];
            /** Grant change permissions to these users */
            assign_change_users?: number[];
            /** Grant change permissions to these groups */
            assign_change_groups?: number[];
            /** Assign these custom fields */
            assign_custom_fields?: number[];
            /**
             * Custom field values
             * @description Optional values to assign to the custom fields.
             */
            assign_custom_fields_values?: unknown;
            remove_all_tags?: boolean;
            /** Remove these tag(s) */
            remove_tags?: number[];
            remove_all_correspondents?: boolean;
            /** Remove these correspondent(s) */
            remove_correspondents?: number[];
            remove_all_document_types?: boolean;
            /** Remove these document type(s) */
            remove_document_types?: number[];
            remove_all_storage_paths?: boolean;
            /** Remove these storage path(s) */
            remove_storage_paths?: number[];
            /** Remove these custom fields */
            remove_custom_fields?: number[];
            remove_all_custom_fields?: boolean;
            remove_all_owners?: boolean;
            /** Remove these owner(s) */
            remove_owners?: number[];
            remove_all_permissions?: boolean;
            /** Remove view permissions for these users */
            remove_view_users?: number[];
            /** Remove view permissions for these groups */
            remove_view_groups?: number[];
            /** Remove change permissions for these users */
            remove_change_users?: number[];
            /** Remove change permissions for these groups */
            remove_change_groups?: number[];
            email?: components["schemas"]["WorkflowActionEmail"] | null;
            webhook?: components["schemas"]["WorkflowActionWebhook"] | null;
        };
        WorkflowActionEmail: {
            id?: number | null;
            /**
             * Email subject
             * @description The subject of the email, can include some placeholders, see documentation.
             */
            subject: string;
            /**
             * Email body
             * @description The body (message) of the email, can include some placeholders, see documentation.
             */
            body: string;
            /**
             * Emails to
             * @description The destination email addresses, comma separated.
             */
            to: string;
            /** Include document in email */
            include_document?: boolean;
        };
        WorkflowActionEmailRequest: {
            id?: number | null;
            /**
             * Email subject
             * @description The subject of the email, can include some placeholders, see documentation.
             */
            subject: string;
            /**
             * Email body
             * @description The body (message) of the email, can include some placeholders, see documentation.
             */
            body: string;
            /**
             * Emails to
             * @description The destination email addresses, comma separated.
             */
            to: string;
            /** Include document in email */
            include_document?: boolean;
        };
        WorkflowActionRequest: {
            id?: number | null;
            /** Workflow Action Type */
            type?: components["schemas"]["WorkflowActionTypeEnum"];
            /** @description Assign a document title, can include some placeholders, see documentation. */
            assign_title?: string | null;
            assign_tags?: (number | null)[];
            assign_correspondent?: number | null;
            assign_document_type?: number | null;
            assign_storage_path?: number | null;
            /** Assign this owner */
            assign_owner?: number | null;
            /** Grant view permissions to these users */
            assign_view_users?: number[];
            /** Grant view permissions to these groups */
            assign_view_groups?: number[];
            /** Grant change permissions to these users */
            assign_change_users?: number[];
            /** Grant change permissions to these groups */
            assign_change_groups?: number[];
            /** Assign these custom fields */
            assign_custom_fields?: number[];
            /**
             * Custom field values
             * @description Optional values to assign to the custom fields.
             */
            assign_custom_fields_values?: unknown;
            remove_all_tags?: boolean;
            /** Remove these tag(s) */
            remove_tags?: number[];
            remove_all_correspondents?: boolean;
            /** Remove these correspondent(s) */
            remove_correspondents?: number[];
            remove_all_document_types?: boolean;
            /** Remove these document type(s) */
            remove_document_types?: number[];
            remove_all_storage_paths?: boolean;
            /** Remove these storage path(s) */
            remove_storage_paths?: number[];
            /** Remove these custom fields */
            remove_custom_fields?: number[];
            remove_all_custom_fields?: boolean;
            remove_all_owners?: boolean;
            /** Remove these owner(s) */
            remove_owners?: number[];
            remove_all_permissions?: boolean;
            /** Remove view permissions for these users */
            remove_view_users?: number[];
            /** Remove view permissions for these groups */
            remove_view_groups?: number[];
            /** Remove change permissions for these users */
            remove_change_users?: number[];
            /** Remove change permissions for these groups */
            remove_change_groups?: number[];
            email?: components["schemas"]["WorkflowActionEmailRequest"] | null;
            webhook?: components["schemas"]["WorkflowActionWebhookRequest"] | null;
        };
        /**
         * @description * `1` - Assignment
         *     * `2` - Removal
         *     * `3` - Email
         *     * `4` - Webhook
         * @enum {integer}
         */
        WorkflowActionTypeEnum: 1 | 2 | 3 | 4;
        WorkflowActionWebhook: {
            id?: number | null;
            /**
             * Webhook url
             * @description The destination URL for the notification.
             */
            url: string;
            /** Use parameters */
            use_params?: boolean;
            /** Send as JSON */
            as_json?: boolean;
            /**
             * Webhook parameters
             * @description The parameters to send with the webhook URL if body not used.
             */
            params?: unknown;
            /**
             * Webhook body
             * @description The body to send with the webhook URL if parameters not used.
             */
            body?: string | null;
            /**
             * Webhook headers
             * @description The headers to send with the webhook URL.
             */
            headers?: unknown;
            /** Include document in webhook */
            include_document?: boolean;
        };
        WorkflowActionWebhookRequest: {
            id?: number | null;
            /**
             * Webhook url
             * @description The destination URL for the notification.
             */
            url: string;
            /** Use parameters */
            use_params?: boolean;
            /** Send as JSON */
            as_json?: boolean;
            /**
             * Webhook parameters
             * @description The parameters to send with the webhook URL if body not used.
             */
            params?: unknown;
            /**
             * Webhook body
             * @description The body to send with the webhook URL if parameters not used.
             */
            body?: string | null;
            /**
             * Webhook headers
             * @description The headers to send with the webhook URL.
             */
            headers?: unknown;
            /** Include document in webhook */
            include_document?: boolean;
        };
        WorkflowRequest: {
            name: string;
            order?: number;
            enabled?: boolean;
            triggers: components["schemas"]["WorkflowTriggerRequest"][];
            actions: components["schemas"]["WorkflowActionRequest"][];
        };
        WorkflowTrigger: {
            id?: number | null;
            /** @default [
             *       1,
             *       2,
             *       3
             *     ] */
            sources: components["schemas"]["SourcesEnum"][];
            /** Trigger Type */
            type: components["schemas"]["WorkflowTriggerTypeEnum"];
            /** @description Only consume documents with a path that matches this if specified. Wildcards specified as * are allowed. Case insensitive. */
            filter_path?: string | null;
            /** @description Only consume documents which entirely match this filename if specified. Wildcards such as *.pdf or *invoice* are allowed. Case insensitive. */
            filter_filename?: string | null;
            /** Filter documents from this mail rule */
            filter_mailrule?: number | null;
            matching_algorithm?: components["schemas"]["WorkflowTriggerMatchingAlgorithmEnum"];
            match?: string;
            is_insensitive?: boolean;
            /** Has these tag(s) */
            filter_has_tags?: number[];
            /** Has this correspondent */
            filter_has_correspondent?: number | null;
            /** Has this document type */
            filter_has_document_type?: number | null;
            /** @description The number of days to offset the schedule trigger by. */
            schedule_offset_days?: number;
            /** @description If the schedule should be recurring. */
            schedule_is_recurring?: boolean;
            /**
             * Schedule recurring delay in days
             * @description The number of days between recurring schedule triggers.
             */
            schedule_recurring_interval_days?: number;
            /** @description The field to check for a schedule trigger.
             *
             *     * `added` - Added
             *     * `created` - Created
             *     * `modified` - Modified
             *     * `custom_field` - Custom Field */
            schedule_date_field?: components["schemas"]["ScheduleDateFieldEnum"];
            schedule_date_custom_field?: number | null;
        };
        /**
         * @description * `0` - None
         *     * `1` - Any word
         *     * `2` - All words
         *     * `3` - Exact match
         *     * `4` - Regular expression
         *     * `5` - Fuzzy word
         * @enum {integer}
         */
        WorkflowTriggerMatchingAlgorithmEnum: 0 | 1 | 2 | 3 | 4 | 5;
        WorkflowTriggerRequest: {
            id?: number | null;
            /** @default [
             *       1,
             *       2,
             *       3
             *     ] */
            sources: components["schemas"]["SourcesEnum"][];
            /** Trigger Type */
            type: components["schemas"]["WorkflowTriggerTypeEnum"];
            /** @description Only consume documents with a path that matches this if specified. Wildcards specified as * are allowed. Case insensitive. */
            filter_path?: string | null;
            /** @description Only consume documents which entirely match this filename if specified. Wildcards such as *.pdf or *invoice* are allowed. Case insensitive. */
            filter_filename?: string | null;
            /** Filter documents from this mail rule */
            filter_mailrule?: number | null;
            matching_algorithm?: components["schemas"]["WorkflowTriggerMatchingAlgorithmEnum"];
            match?: string;
            is_insensitive?: boolean;
            /** Has these tag(s) */
            filter_has_tags?: number[];
            /** Has this correspondent */
            filter_has_correspondent?: number | null;
            /** Has this document type */
            filter_has_document_type?: number | null;
            /** @description The number of days to offset the schedule trigger by. */
            schedule_offset_days?: number;
            /** @description If the schedule should be recurring. */
            schedule_is_recurring?: boolean;
            /**
             * Schedule recurring delay in days
             * @description The number of days between recurring schedule triggers.
             */
            schedule_recurring_interval_days?: number;
            /** @description The field to check for a schedule trigger.
             *
             *     * `added` - Added
             *     * `created` - Created
             *     * `modified` - Modified
             *     * `custom_field` - Custom Field */
            schedule_date_field?: components["schemas"]["ScheduleDateFieldEnum"];
            schedule_date_custom_field?: number | null;
        };
        /**
         * @description * `1` - Consumption Started
         *     * `2` - Document Added
         *     * `3` - Document Updated
         *     * `4` - Scheduled
         * @enum {integer}
         */
        WorkflowTriggerTypeEnum: 1 | 2 | 3 | 4;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
interface operations {
    bulk_edit_objects: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BulkEditObjectsRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BulkEditResult"];
                };
            };
        };
    };
    config_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApplicationConfiguration"][];
                };
            };
        };
    };
    config_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this paperless application settings. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApplicationConfiguration"];
                };
            };
        };
    };
    config_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this paperless application settings. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApplicationConfigurationRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ApplicationConfigurationRequest"];
                "multipart/form-data": components["schemas"]["ApplicationConfigurationRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApplicationConfiguration"];
                };
            };
        };
    };
    config_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this paperless application settings. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    config_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this paperless application settings. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedApplicationConfigurationRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedApplicationConfigurationRequest"];
                "multipart/form-data": components["schemas"]["PatchedApplicationConfigurationRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApplicationConfiguration"];
                };
            };
        };
    };
    correspondents_list: {
        parameters: {
            query?: {
                full_perms?: boolean;
                id?: number;
                /** @description Multiple values may be separated by commas. */
                id__in?: number[];
                name__icontains?: string;
                name__iendswith?: string;
                name__iexact?: string;
                name__istartswith?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedCorrespondentList"];
                };
            };
        };
    };
    correspondents_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CorrespondentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["CorrespondentRequest"];
                "multipart/form-data": components["schemas"]["CorrespondentRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Correspondent"];
                };
            };
        };
    };
    correspondents_retrieve: {
        parameters: {
            query?: {
                full_perms?: boolean;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this correspondent. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Correspondent"];
                };
            };
        };
    };
    correspondents_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this correspondent. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CorrespondentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["CorrespondentRequest"];
                "multipart/form-data": components["schemas"]["CorrespondentRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Correspondent"];
                };
            };
        };
    };
    correspondents_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this correspondent. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    correspondents_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this correspondent. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedCorrespondentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedCorrespondentRequest"];
                "multipart/form-data": components["schemas"]["PatchedCorrespondentRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Correspondent"];
                };
            };
        };
    };
    custom_fields_list: {
        parameters: {
            query?: {
                id?: number;
                /** @description Multiple values may be separated by commas. */
                id__in?: number[];
                name__icontains?: string;
                name__iendswith?: string;
                name__iexact?: string;
                name__istartswith?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedCustomFieldList"];
                };
            };
        };
    };
    custom_fields_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomFieldRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["CustomFieldRequest"];
                "multipart/form-data": components["schemas"]["CustomFieldRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomField"];
                };
            };
        };
    };
    custom_fields_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this custom field. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomField"];
                };
            };
        };
    };
    custom_fields_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this custom field. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomFieldRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["CustomFieldRequest"];
                "multipart/form-data": components["schemas"]["CustomFieldRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomField"];
                };
            };
        };
    };
    custom_fields_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this custom field. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    custom_fields_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this custom field. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedCustomFieldRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedCustomFieldRequest"];
                "multipart/form-data": components["schemas"]["PatchedCustomFieldRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomField"];
                };
            };
        };
    };
    document_types_list: {
        parameters: {
            query?: {
                full_perms?: boolean;
                id?: number;
                /** @description Multiple values may be separated by commas. */
                id__in?: number[];
                name__icontains?: string;
                name__iendswith?: string;
                name__iexact?: string;
                name__istartswith?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedDocumentTypeList"];
                };
            };
        };
    };
    document_types_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DocumentTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["DocumentTypeRequest"];
                "multipart/form-data": components["schemas"]["DocumentTypeRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentType"];
                };
            };
        };
    };
    document_types_retrieve: {
        parameters: {
            query?: {
                full_perms?: boolean;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this document type. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentType"];
                };
            };
        };
    };
    document_types_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this document type. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DocumentTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["DocumentTypeRequest"];
                "multipart/form-data": components["schemas"]["DocumentTypeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentType"];
                };
            };
        };
    };
    document_types_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this document type. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    document_types_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this document type. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedDocumentTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedDocumentTypeRequest"];
                "multipart/form-data": components["schemas"]["PatchedDocumentTypeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentType"];
                };
            };
        };
    };
    documents_list: {
        parameters: {
            query?: {
                added__date__gt?: string;
                added__date__gte?: string;
                added__date__lt?: string;
                added__date__lte?: string;
                added__day?: number;
                added__gt?: string;
                added__gte?: string;
                added__lt?: string;
                added__lte?: string;
                added__month?: number;
                added__year?: number;
                archive_serial_number?: number;
                archive_serial_number__gt?: number;
                archive_serial_number__gte?: number;
                archive_serial_number__isnull?: boolean;
                archive_serial_number__lt?: number;
                archive_serial_number__lte?: number;
                checksum__icontains?: string;
                checksum__iendswith?: string;
                checksum__iexact?: string;
                checksum__istartswith?: string;
                content__icontains?: string;
                content__iendswith?: string;
                content__iexact?: string;
                content__istartswith?: string;
                correspondent__id?: number;
                /** @description Multiple values may be separated by commas. */
                correspondent__id__in?: number[];
                correspondent__id__none?: number;
                correspondent__isnull?: boolean;
                correspondent__name__icontains?: string;
                correspondent__name__iendswith?: string;
                correspondent__name__iexact?: string;
                correspondent__name__istartswith?: string;
                created__date__gt?: string;
                created__date__gte?: string;
                created__date__lt?: string;
                created__date__lte?: string;
                created__day?: number;
                created__gt?: string;
                created__gte?: string;
                created__lt?: string;
                created__lte?: string;
                created__month?: number;
                created__year?: number;
                custom_field_query?: string;
                custom_fields__icontains?: string;
                custom_fields__id__all?: number;
                custom_fields__id__in?: number;
                custom_fields__id__none?: number;
                document_type__id?: number;
                /** @description Multiple values may be separated by commas. */
                document_type__id__in?: number[];
                document_type__id__none?: number;
                document_type__isnull?: boolean;
                document_type__name__icontains?: string;
                document_type__name__iendswith?: string;
                document_type__name__iexact?: string;
                document_type__name__istartswith?: string;
                fields?: string[];
                full_perms?: boolean;
                /** @description Has custom field */
                has_custom_fields?: boolean;
                id?: number;
                /** @description Multiple values may be separated by commas. */
                id__in?: number[];
                is_in_inbox?: boolean;
                /** @description Is tagged */
                is_tagged?: boolean;
                mime_type?: string;
                modified__date__gt?: string;
                modified__date__gte?: string;
                modified__date__lt?: string;
                modified__date__lte?: string;
                modified__day?: number;
                modified__gt?: string;
                modified__gte?: string;
                modified__lt?: string;
                modified__lte?: string;
                modified__month?: number;
                modified__year?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                original_filename__icontains?: string;
                original_filename__iendswith?: string;
                original_filename__iexact?: string;
                original_filename__istartswith?: string;
                owner__id?: number;
                /** @description Multiple values may be separated by commas. */
                owner__id__in?: number[];
                owner__id__none?: number;
                owner__isnull?: boolean;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description Advanced search query string */
                query?: string;
                /** @description A search term. */
                search?: string;
                shared_by__id?: boolean;
                storage_path__id?: number;
                /** @description Multiple values may be separated by commas. */
                storage_path__id__in?: number[];
                storage_path__id__none?: number;
                storage_path__isnull?: boolean;
                storage_path__name__icontains?: string;
                storage_path__name__iendswith?: string;
                storage_path__name__iexact?: string;
                storage_path__name__istartswith?: string;
                tags__id?: number;
                tags__id__all?: number;
                tags__id__in?: number;
                tags__id__none?: number;
                tags__name__icontains?: string;
                tags__name__iendswith?: string;
                tags__name__iexact?: string;
                tags__name__istartswith?: string;
                title__icontains?: string;
                title__iendswith?: string;
                title__iexact?: string;
                title__istartswith?: string;
                title_content?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedDocumentList"];
                };
            };
        };
    };
    documents_retrieve: {
        parameters: {
            query?: {
                fields?: string[];
                full_perms?: boolean;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this document. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Document"];
                };
            };
            /** @description No response body */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    documents_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this document. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DocumentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["DocumentRequest"];
                "multipart/form-data": components["schemas"]["DocumentRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Document"];
                };
            };
        };
    };
    documents_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this document. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    documents_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this document. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedDocumentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedDocumentRequest"];
                "multipart/form-data": components["schemas"]["PatchedDocumentRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Document"];
                };
            };
        };
    };
    documents_download_retrieve: {
        parameters: {
            query?: {
                original?: boolean;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this document. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    documents_email_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this document. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailRequestRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["EmailRequestRequest"];
                "multipart/form-data": components["schemas"]["EmailRequestRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailResponse"];
                };
            };
            /** @description No response body */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No response body */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No response body */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No response body */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    documents_history_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this document. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedLogEntryList"];
                };
            };
            /** @description No response body */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No response body */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No response body */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    documents_metadata_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this document. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Metadata"];
                };
            };
            /** @description No response body */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No response body */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No response body */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    documents_notes_list: {
        parameters: {
            query?: {
                /** @description Note ID to delete (used only for DELETE requests) */
                id?: number;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this document. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedNotesList"];
                };
            };
            /** @description No response body */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No response body */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No response body */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    documents_notes_create: {
        parameters: {
            query?: {
                /** @description Note ID to delete (used only for DELETE requests) */
                id?: number;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this document. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NoteCreateRequestRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["NoteCreateRequestRequest"];
                "multipart/form-data": components["schemas"]["NoteCreateRequestRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedNotesList"];
                };
            };
            /** @description No response body */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No response body */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No response body */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    documents_notes_destroy: {
        parameters: {
            query?: {
                /** @description Note ID to delete (used only for DELETE requests) */
                id?: number;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this document. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedNotesList"];
                };
            };
            /** @description No response body */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No response body */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No response body */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    documents_preview_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this document. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    document_share_links: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id?: number;
                        /** Format: date-time */
                        created?: string;
                        /** Format: date-time */
                        expiration?: string;
                        slug?: string;
                    }[];
                };
            };
            /** @description No response body */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No response body */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No response body */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    documents_suggestions_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this document. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Suggestions"];
                };
            };
            /** @description No response body */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No response body */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No response body */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    documents_thumb_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this document. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    documents_bulk_download_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BulkDownloadRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BulkDownload"];
                };
            };
        };
    };
    bulk_edit: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BulkEditRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BulkEditDocumentsResult"];
                };
            };
        };
    };
    documents_next_asn_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
        };
    };
    documents_post_document_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["PostDocumentRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    documents_selection_data_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["DocumentListRequest"];
                "application/json": components["schemas"]["DocumentListRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SelectionData"];
                };
            };
        };
    };
    groups_list: {
        parameters: {
            query?: {
                name__icontains?: string;
                name__iendswith?: string;
                name__iexact?: string;
                name__istartswith?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedGroupList"];
                };
            };
        };
    };
    groups_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["GroupRequest"];
                "multipart/form-data": components["schemas"]["GroupRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Group"];
                };
            };
        };
    };
    groups_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this group. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Group"];
                };
            };
        };
    };
    groups_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this group. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["GroupRequest"];
                "multipart/form-data": components["schemas"]["GroupRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Group"];
                };
            };
        };
    };
    groups_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this group. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    groups_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this group. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedGroupRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedGroupRequest"];
                "multipart/form-data": components["schemas"]["PatchedGroupRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Group"];
                };
            };
        };
    };
    logs_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    retrieve_log: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description No response body */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    mail_accounts_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedMailAccountList"];
                };
            };
        };
    };
    mail_accounts_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MailAccountRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["MailAccountRequest"];
                "multipart/form-data": components["schemas"]["MailAccountRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MailAccount"];
                };
            };
        };
    };
    mail_accounts_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this mail account. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MailAccount"];
                };
            };
        };
    };
    mail_accounts_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this mail account. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MailAccountRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["MailAccountRequest"];
                "multipart/form-data": components["schemas"]["MailAccountRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MailAccount"];
                };
            };
        };
    };
    mail_accounts_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this mail account. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    mail_accounts_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this mail account. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedMailAccountRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedMailAccountRequest"];
                "multipart/form-data": components["schemas"]["PatchedMailAccountRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MailAccount"];
                };
            };
        };
    };
    mail_account_process: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this mail account. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MailAccountRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["MailAccountRequest"];
                "multipart/form-data": components["schemas"]["MailAccountRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MailAccountProcessResponse"];
                };
            };
            /** @description No response body */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    mail_account_test: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MailAccountRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["MailAccountRequest"];
                "multipart/form-data": components["schemas"]["MailAccountRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MailAccountTestResponse"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    mail_rules_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedMailRuleList"];
                };
            };
        };
    };
    mail_rules_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MailRuleRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["MailRuleRequest"];
                "multipart/form-data": components["schemas"]["MailRuleRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MailRule"];
                };
            };
        };
    };
    mail_rules_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this mail rule. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MailRule"];
                };
            };
        };
    };
    mail_rules_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this mail rule. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MailRuleRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["MailRuleRequest"];
                "multipart/form-data": components["schemas"]["MailRuleRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MailRule"];
                };
            };
        };
    };
    mail_rules_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this mail rule. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    mail_rules_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this mail rule. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedMailRuleRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedMailRuleRequest"];
                "multipart/form-data": components["schemas"]["PatchedMailRuleRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MailRule"];
                };
            };
        };
    };
    oauth_callback_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    profile_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Profile"];
                };
            };
        };
    };
    profile_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedProfileRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedProfileRequest"];
                "multipart/form-data": components["schemas"]["PatchedProfileRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Profile"];
                };
            };
        };
    };
    profile_disconnect_social_account_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    id: number;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    profile_generate_auth_token_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    profile_social_account_providers_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    profile_totp_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    profile_totp_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    secret: string;
                    code: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    profile_totp_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    remote_version_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    saved_views_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSavedViewList"];
                };
            };
        };
    };
    saved_views_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SavedViewRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["SavedViewRequest"];
                "multipart/form-data": components["schemas"]["SavedViewRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SavedView"];
                };
            };
        };
    };
    saved_views_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this saved view. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SavedView"];
                };
            };
        };
    };
    saved_views_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this saved view. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SavedViewRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["SavedViewRequest"];
                "multipart/form-data": components["schemas"]["SavedViewRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SavedView"];
                };
            };
        };
    };
    saved_views_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this saved view. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    saved_views_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this saved view. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedSavedViewRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedSavedViewRequest"];
                "multipart/form-data": components["schemas"]["PatchedSavedViewRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SavedView"];
                };
            };
        };
    };
    search_retrieve: {
        parameters: {
            query: {
                /** @description Search only the database */
                db_only?: boolean;
                /** @description Query to search for */
                query: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchResult"];
                };
            };
        };
    };
    search_autocomplete_list: {
        parameters: {
            query?: {
                /** @description Number of completions to return */
                limit?: number;
                /** @description Term to search for */
                term?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    share_links_list: {
        parameters: {
            query?: {
                created__date__gt?: string;
                created__date__gte?: string;
                created__date__lt?: string;
                created__date__lte?: string;
                created__day?: number;
                created__gt?: string;
                created__gte?: string;
                created__lt?: string;
                created__lte?: string;
                created__month?: number;
                created__year?: number;
                expiration__date__gt?: string;
                expiration__date__gte?: string;
                expiration__date__lt?: string;
                expiration__date__lte?: string;
                expiration__day?: number;
                expiration__gt?: string;
                expiration__gte?: string;
                expiration__lt?: string;
                expiration__lte?: string;
                expiration__month?: number;
                expiration__year?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedShareLinkList"];
                };
            };
        };
    };
    share_links_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ShareLinkRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ShareLinkRequest"];
                "multipart/form-data": components["schemas"]["ShareLinkRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShareLink"];
                };
            };
        };
    };
    share_links_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this share link. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShareLink"];
                };
            };
        };
    };
    share_links_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this share link. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ShareLinkRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ShareLinkRequest"];
                "multipart/form-data": components["schemas"]["ShareLinkRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShareLink"];
                };
            };
        };
    };
    share_links_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this share link. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    share_links_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this share link. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedShareLinkRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedShareLinkRequest"];
                "multipart/form-data": components["schemas"]["PatchedShareLinkRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShareLink"];
                };
            };
        };
    };
    statistics_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    status_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SystemStatus"];
                };
            };
        };
    };
    storage_paths_list: {
        parameters: {
            query?: {
                full_perms?: boolean;
                id?: number;
                /** @description Multiple values may be separated by commas. */
                id__in?: number[];
                name__icontains?: string;
                name__iendswith?: string;
                name__iexact?: string;
                name__istartswith?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                path__icontains?: string;
                path__iendswith?: string;
                path__iexact?: string;
                path__istartswith?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedStoragePathList"];
                };
            };
        };
    };
    storage_paths_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StoragePathRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["StoragePathRequest"];
                "multipart/form-data": components["schemas"]["StoragePathRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StoragePath"];
                };
            };
        };
    };
    storage_paths_retrieve: {
        parameters: {
            query?: {
                full_perms?: boolean;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this storage path. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StoragePath"];
                };
            };
        };
    };
    storage_paths_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this storage path. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StoragePathRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["StoragePathRequest"];
                "multipart/form-data": components["schemas"]["StoragePathRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StoragePath"];
                };
            };
        };
    };
    storage_paths_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this storage path. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    storage_paths_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this storage path. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedStoragePathRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedStoragePathRequest"];
                "multipart/form-data": components["schemas"]["PatchedStoragePathRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StoragePath"];
                };
            };
        };
    };
    storage_paths_test_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StoragePathRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["StoragePathRequest"];
                "multipart/form-data": components["schemas"]["StoragePathRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StoragePath"];
                };
            };
        };
    };
    tags_list: {
        parameters: {
            query?: {
                full_perms?: boolean;
                id?: number;
                /** @description Multiple values may be separated by commas. */
                id__in?: number[];
                name__icontains?: string;
                name__iendswith?: string;
                name__iexact?: string;
                name__istartswith?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedTagList"];
                };
            };
        };
    };
    tags_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TagRequest"];
                "multipart/form-data": components["schemas"]["TagRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tag"];
                };
            };
        };
    };
    tags_retrieve: {
        parameters: {
            query?: {
                full_perms?: boolean;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this tag. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tag"];
                };
            };
        };
    };
    tags_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this tag. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TagRequest"];
                "multipart/form-data": components["schemas"]["TagRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tag"];
                };
            };
        };
    };
    tags_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this tag. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    tags_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this tag. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedTagRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedTagRequest"];
                "multipart/form-data": components["schemas"]["PatchedTagRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tag"];
                };
            };
        };
    };
    tasks_list: {
        parameters: {
            query?: {
                /** @description Acknowledged */
                acknowledged?: boolean;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description Current state of the task being run
                 *
                 *     * `FAILURE` - FAILURE
                 *     * `PENDING` - PENDING
                 *     * `RECEIVED` - RECEIVED
                 *     * `RETRY` - RETRY
                 *     * `REVOKED` - REVOKED
                 *     * `STARTED` - STARTED
                 *     * `SUCCESS` - SUCCESS */
                status?: "FAILURE" | "PENDING" | "RECEIVED" | "RETRY" | "REVOKED" | "STARTED" | "SUCCESS";
                /** @description Filter tasks by Celery UUID */
                task_id?: string;
                /** @description Name of the task that was run
                 *
                 *     * `consume_file` - Consume File
                 *     * `train_classifier` - Train Classifier
                 *     * `check_sanity` - Check Sanity
                 *     * `index_optimize` - Index Optimize */
                task_name?: "check_sanity" | "consume_file" | "index_optimize" | "train_classifier" | null;
                /** @description The type of task that was run
                 *
                 *     * `auto_task` - Auto Task
                 *     * `scheduled_task` - Scheduled Task
                 *     * `manual_task` - Manual Task */
                type?: "auto_task" | "manual_task" | "scheduled_task";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TasksView"][];
                };
            };
        };
    };
    tasks_retrieve: {
        parameters: {
            query?: {
                /** @description Filter tasks by Celery UUID */
                task_id?: string;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this paperless task. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TasksView"];
                };
            };
        };
    };
    acknowledge_tasks: {
        parameters: {
            query?: {
                /** @description Filter tasks by Celery UUID */
                task_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    tasks: number[];
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AcknowledgeTasks"];
                };
            };
            /** @description No response body */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    tasks_run_create: {
        parameters: {
            query?: {
                /** @description Filter tasks by Celery UUID */
                task_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TasksViewRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TasksViewRequest"];
                "multipart/form-data": components["schemas"]["TasksViewRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TasksView"];
                };
            };
        };
    };
    token_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["PaperlessAuthTokenRequest"];
                "multipart/form-data": components["schemas"]["PaperlessAuthTokenRequest"];
                "application/json": components["schemas"]["PaperlessAuthTokenRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaperlessAuthToken"];
                };
            };
        };
    };
    trash_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    trash_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TrashRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TrashRequest"];
                "multipart/form-data": components["schemas"]["TrashRequest"];
            };
        };
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ui_settings_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UiSettingsView"];
                };
            };
        };
    };
    ui_settings_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UiSettingsViewRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["UiSettingsViewRequest"];
                "multipart/form-data": components["schemas"]["UiSettingsViewRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UiSettingsView"];
                };
            };
        };
    };
    users_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                username__icontains?: string;
                username__iendswith?: string;
                username__iexact?: string;
                username__istartswith?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUserList"];
                };
            };
        };
    };
    users_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["UserRequest"];
                "multipart/form-data": components["schemas"]["UserRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    users_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    users_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["UserRequest"];
                "multipart/form-data": components["schemas"]["UserRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    users_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUserRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedUserRequest"];
                "multipart/form-data": components["schemas"]["PatchedUserRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    users_deactivate_totp_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    workflow_actions_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedWorkflowActionList"];
                };
            };
        };
    };
    workflow_actions_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WorkflowActionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["WorkflowActionRequest"];
                "multipart/form-data": components["schemas"]["WorkflowActionRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowAction"];
                };
            };
        };
    };
    workflow_actions_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this workflow action. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowAction"];
                };
            };
        };
    };
    workflow_actions_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this workflow action. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WorkflowActionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["WorkflowActionRequest"];
                "multipart/form-data": components["schemas"]["WorkflowActionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowAction"];
                };
            };
        };
    };
    workflow_actions_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this workflow action. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    workflow_actions_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this workflow action. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedWorkflowActionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedWorkflowActionRequest"];
                "multipart/form-data": components["schemas"]["PatchedWorkflowActionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowAction"];
                };
            };
        };
    };
    workflow_triggers_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedWorkflowTriggerList"];
                };
            };
        };
    };
    workflow_triggers_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkflowTriggerRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["WorkflowTriggerRequest"];
                "multipart/form-data": components["schemas"]["WorkflowTriggerRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowTrigger"];
                };
            };
        };
    };
    workflow_triggers_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this workflow trigger. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowTrigger"];
                };
            };
        };
    };
    workflow_triggers_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this workflow trigger. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkflowTriggerRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["WorkflowTriggerRequest"];
                "multipart/form-data": components["schemas"]["WorkflowTriggerRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowTrigger"];
                };
            };
        };
    };
    workflow_triggers_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this workflow trigger. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    workflow_triggers_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this workflow trigger. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedWorkflowTriggerRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedWorkflowTriggerRequest"];
                "multipart/form-data": components["schemas"]["PatchedWorkflowTriggerRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowTrigger"];
                };
            };
        };
    };
    workflows_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedWorkflowList"];
                };
            };
        };
    };
    workflows_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkflowRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["WorkflowRequest"];
                "multipart/form-data": components["schemas"]["WorkflowRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workflow"];
                };
            };
        };
    };
    workflows_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this workflow. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workflow"];
                };
            };
        };
    };
    workflows_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this workflow. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkflowRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["WorkflowRequest"];
                "multipart/form-data": components["schemas"]["WorkflowRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workflow"];
                };
            };
        };
    };
    workflows_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this workflow. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    workflows_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this workflow. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedWorkflowRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedWorkflowRequest"];
                "multipart/form-data": components["schemas"]["PatchedWorkflowRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workflow"];
                };
            };
        };
    };
}

type ContentTypes = 'application/json' | 'application/x-www-form-urlencoded' | 'multipart/form-data' | 'application/octet-stream' | 'text/plain' | '*/*';
type ExtractContent<T> = T extends {
    [K in ContentTypes]?: infer U;
} ? Exclude<U, undefined> : T extends {
    [key: string]: infer U;
} ? U : unknown;
type ExtractResponse<T> = T extends {
    content: infer Content;
} ? ExtractContent<Content> : void;
type ExtractRequestBody<T> = T extends {
    content: infer Content;
} ? ExtractContent<Content> : undefined;
type ExtractQuery<T> = T extends {
    query?: infer Q;
} ? Q : undefined;
type ExtractPath<T> = T extends {
    path: infer P;
} ? P : undefined;
type Components = components;
type Operations = operations;
type Paths = paths;
type Schema<T extends keyof Components['schemas']> = Components['schemas'][T];
type OperationNames = keyof Operations;
type OperationDefinition<T extends OperationNames> = Operations[T];
type OperationParameters<T extends OperationNames> = OperationDefinition<T> extends {
    parameters?: infer P;
} ? NonNullable<P> : Record<string, never>;
type OperationQuery<T extends OperationNames> = ExtractQuery<OperationParameters<T>>;
type OperationPathParams<T extends OperationNames> = ExtractPath<OperationParameters<T>>;
type OperationRequestBody<T extends OperationNames> = ExtractRequestBody<OperationDefinition<T> extends {
    requestBody?: infer R;
} ? R : undefined>;
type OperationResponses<T extends OperationNames> = OperationDefinition<T> extends {
    responses: infer R;
} ? NonUndefined<R> : never;
type ResponseStatuses<T extends OperationNames> = keyof OperationResponses<T>;
type NumericStatuses<T extends OperationNames> = Extract<ResponseStatuses<T>, number>;
type ChooseDefaultStatus<T> = [T] extends [never] ? never : 200 extends T ? 200 : 201 extends T ? 201 : 202 extends T ? 202 : 204 extends T ? 204 : T;
type DefaultStatus<T extends OperationNames> = ChooseDefaultStatus<NumericStatuses<T>> extends never ? ResponseStatuses<T> : ChooseDefaultStatus<NumericStatuses<T>>;
type OperationResponse<T extends OperationNames, Status extends ResponseStatuses<T> = DefaultStatus<T>> = OperationResponses<T> extends never ? void : Status extends keyof OperationResponses<T> ? ExtractResponse<OperationResponses<T>[Status]> : void;
interface PaginatedResponse<T> {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: T[];
    all?: unknown[];
}
type NonUndefined<T> = T extends undefined ? never : T;

type TokenRequest = NonUndefined<OperationRequestBody<'token_create'>>;
type TokenResponse = OperationResponse<'token_create'>;
type ProfileTokenResponse = OperationResponse<'profile_generate_auth_token_create'>;
declare class AuthResource {
    private readonly http;
    constructor(http: HttpClient);
    login(body: TokenRequest): Promise<TokenResponse>;
    regenerateProfileToken(): Promise<ProfileTokenResponse>;
}

type Correspondent = Schema<'Correspondent'>;
type CorrespondentList = OperationResponse<'correspondents_list'>;
type CorrespondentCreateRequest = NonUndefined<OperationRequestBody<'correspondents_create'>>;
type CorrespondentUpdateRequest = NonUndefined<OperationRequestBody<'correspondents_update'>>;
type CorrespondentPatchRequest = NonUndefined<OperationRequestBody<'correspondents_partial_update'>>;
type CorrespondentListQuery = OperationQuery<'correspondents_list'>;
type CorrespondentPath = OperationPathParams<'correspondents_retrieve'>;
declare class CorrespondentsResource {
    private readonly http;
    constructor(http: HttpClient);
    list(query?: CorrespondentListQuery): Promise<CorrespondentList>;
    listAll(query?: CorrespondentListQuery): Promise<Correspondent[]>;
    retrieve(id: CorrespondentPath['id']): Promise<Correspondent>;
    create(body: CorrespondentCreateRequest): Promise<Correspondent>;
    update(id: CorrespondentPath['id'], body: CorrespondentUpdateRequest): Promise<Correspondent>;
    partialUpdate(id: CorrespondentPath['id'], body: CorrespondentPatchRequest): Promise<Correspondent>;
    remove(id: CorrespondentPath['id']): Promise<void>;
}

type DocumentType = Schema<'DocumentType'>;
type DocumentTypeList = OperationResponse<'document_types_list'>;
type DocumentTypeCreateRequest = NonUndefined<OperationRequestBody<'document_types_create'>>;
type DocumentTypeUpdateRequest = NonUndefined<OperationRequestBody<'document_types_update'>>;
type DocumentTypePatchRequest = NonUndefined<OperationRequestBody<'document_types_partial_update'>>;
type DocumentTypeListQuery = OperationQuery<'document_types_list'>;
type DocumentTypePath = OperationPathParams<'document_types_retrieve'>;
declare class DocumentTypesResource {
    private readonly http;
    constructor(http: HttpClient);
    list(query?: DocumentTypeListQuery): Promise<DocumentTypeList>;
    listAll(query?: DocumentTypeListQuery): Promise<DocumentType[]>;
    retrieve(id: DocumentTypePath['id']): Promise<DocumentType>;
    create(body: DocumentTypeCreateRequest): Promise<DocumentType>;
    update(id: DocumentTypePath['id'], body: DocumentTypeUpdateRequest): Promise<DocumentType>;
    partialUpdate(id: DocumentTypePath['id'], body: DocumentTypePatchRequest): Promise<DocumentType>;
    remove(id: DocumentTypePath['id']): Promise<void>;
}

type Document = Schema<'Document'>;
type DocumentRequest = NonUndefined<OperationRequestBody<'documents_update'>>;
type DocumentPatch = NonUndefined<OperationRequestBody<'documents_partial_update'>>;
type DocumentList = OperationResponse<'documents_list'>;
type DocumentHistoryList = OperationResponse<'documents_history_list'>;
type DocumentNotesList = OperationResponse<'documents_notes_list'>;
type DocumentEmailResponse = OperationResponse<'documents_email_create'>;
type DocumentSelectionData = OperationResponse<'documents_selection_data_create'>;
type UploadDocumentRequest = NonUndefined<OperationRequestBody<'documents_post_document_create'>>;
type DocumentsListQuery = OperationQuery<'documents_list'>;
type DocumentsRetrieveParams = OperationQuery<'documents_retrieve'>;
type DocumentsHistoryQuery = OperationQuery<'documents_history_list'>;
type DocumentsNotesQuery = OperationQuery<'documents_notes_list'>;
type DocumentsNotesCreateBody = NonUndefined<OperationRequestBody<'documents_notes_create'>>;
type DocumentPath = OperationPathParams<'documents_retrieve'>;
type DownloadOptions = {
    original?: boolean;
    responseType?: 'arraybuffer' | 'stream';
};
type UploadFile = Buffer | NodeJS.ReadableStream | Blob | string;
interface UploadDocumentOptions extends Omit<UploadDocumentRequest, 'document'> {
    document: UploadFile;
}
declare class DocumentsResource {
    private readonly http;
    constructor(http: HttpClient);
    list(query?: DocumentsListQuery): Promise<DocumentList>;
    iterate(query?: DocumentsListQuery): AsyncGenerator<Document, void, unknown>;
    listAll(query?: DocumentsListQuery): Promise<Document[]>;
    retrieve(id: DocumentPath['id'], query?: DocumentsRetrieveParams): Promise<Document>;
    update(id: DocumentPath['id'], body: DocumentRequest): Promise<Document>;
    partialUpdate(id: DocumentPath['id'], body: DocumentPatch): Promise<Document>;
    remove(id: DocumentPath['id']): Promise<void>;
    upload(options: UploadDocumentOptions): Promise<string>;
    download(id: DocumentPath['id'], { original, responseType }?: DownloadOptions): Promise<ArrayBuffer | NodeJS.ReadableStream>;
    history(id: DocumentPath['id'], query?: DocumentsHistoryQuery): Promise<DocumentHistoryList>;
    notes(id: DocumentPath['id'], query?: DocumentsNotesQuery): Promise<DocumentNotesList>;
    addNote(id: DocumentPath['id'], body: DocumentsNotesCreateBody): Promise<DocumentNotesList>;
    removeNote(id: DocumentPath['id'], noteId: number): Promise<DocumentNotesList>;
    sendByEmail(id: DocumentPath['id'], body: NonUndefined<OperationRequestBody<'documents_email_create'>>): Promise<DocumentEmailResponse>;
    selectionData(body: NonUndefined<OperationRequestBody<'documents_selection_data_create'>>): Promise<DocumentSelectionData>;
}

type Tag = Schema<'Tag'>;
type TagList = OperationResponse<'tags_list'>;
type TagRequest = NonUndefined<OperationRequestBody<'tags_create'>>;
type TagUpdateRequest = NonUndefined<OperationRequestBody<'tags_update'>>;
type TagPatchRequest = NonUndefined<OperationRequestBody<'tags_partial_update'>>;
type TagListQuery = OperationQuery<'tags_list'>;
type TagPath = OperationPathParams<'tags_retrieve'>;
declare class TagsResource {
    private readonly http;
    constructor(http: HttpClient);
    list(query?: TagListQuery): Promise<TagList>;
    listAll(query?: TagListQuery): Promise<Tag[]>;
    retrieve(id: TagPath['id']): Promise<Tag>;
    create(body: TagRequest): Promise<Tag>;
    update(id: TagPath['id'], body: TagUpdateRequest): Promise<Tag>;
    partialUpdate(id: TagPath['id'], body: TagPatchRequest): Promise<Tag>;
    remove(id: TagPath['id']): Promise<void>;
}

type Task = Schema<'TasksView'>;
type TaskListQuery = OperationQuery<'tasks_list'>;
type TaskRetrieveQuery = OperationQuery<'tasks_retrieve'>;
type AcknowledgeTasksResponse = OperationResponse<'acknowledge_tasks'>;
type AcknowledgeTasksBody = NonUndefined<OperationRequestBody<'acknowledge_tasks'>>;
type RunTaskBody = NonUndefined<OperationRequestBody<'tasks_run_create'>>;
type TaskIdentifier = number;
declare class TasksResource {
    private readonly http;
    constructor(http: HttpClient);
    list(query?: TaskListQuery): Promise<Task[]>;
    retrieve(id: TaskIdentifier, query?: TaskRetrieveQuery): Promise<Task>;
    acknowledge(body: AcknowledgeTasksBody, query?: OperationQuery<'acknowledge_tasks'>): Promise<AcknowledgeTasksResponse>;
    run(body: RunTaskBody, query?: OperationQuery<'tasks_run_create'>): Promise<Task>;
}

type User = Schema<'User'>;
type UserList = OperationResponse<'users_list'>;
type UserCreateRequest = NonUndefined<OperationRequestBody<'users_create'>>;
type UserUpdateRequest = NonUndefined<OperationRequestBody<'users_update'>>;
type UserPatchRequest = NonUndefined<OperationRequestBody<'users_partial_update'>>;
type UserListQuery = OperationQuery<'users_list'>;
type UserPath = OperationPathParams<'users_retrieve'>;
type DeactivateTotpBody = NonUndefined<OperationRequestBody<'users_deactivate_totp_create'>>;
type DeactivateTotpResponse = OperationResponse<'users_deactivate_totp_create'>;
declare class UsersResource {
    private readonly http;
    constructor(http: HttpClient);
    list(query?: UserListQuery): Promise<UserList>;
    listAll(query?: UserListQuery): Promise<User[]>;
    retrieve(id: UserPath['id']): Promise<User>;
    create(body: UserCreateRequest): Promise<User>;
    update(id: UserPath['id'], body: UserUpdateRequest): Promise<User>;
    partialUpdate(id: UserPath['id'], body: UserPatchRequest): Promise<User>;
    remove(id: UserPath['id']): Promise<void>;
    deactivateTotp(id: UserPath['id'], body: DeactivateTotpBody): Promise<DeactivateTotpResponse>;
}

interface PaperlessClientOptions extends HttpClientOptions {
}
declare class PaperlessClient {
    readonly http: HttpClient;
    readonly documents: DocumentsResource;
    readonly documentTypes: DocumentTypesResource;
    readonly correspondents: CorrespondentsResource;
    readonly tags: TagsResource;
    readonly tasks: TasksResource;
    readonly users: UsersResource;
    readonly auth: AuthResource;
    constructor(options: PaperlessClientOptions);
    setToken(token: string | null, options?: {
        prefix?: string;
    }): void;
    clearToken(): void;
}
declare const createPaperlessClient: (options: PaperlessClientOptions) => PaperlessClient;

interface EnvConfig {
    baseURL?: string;
    token?: string;
    tokenPrefix?: string;
    headerName?: string;
}
interface LoadEnvOptions {
    dotenv?: boolean | DotenvConfigOptions;
}
declare const loadPaperlessEnv: ({ dotenv }?: LoadEnvOptions) => EnvConfig;
declare const createOptionsFromEnv: ({ defaults, dotenv }?: LoadEnvOptions & {
    defaults?: Partial<PaperlessClientOptions>;
}) => PaperlessClientOptions;

type PathParams = Record<string, string | number | boolean>;
declare const buildPath: (template: string, params?: PathParams) => string;

export { AuthResource, type Components, CorrespondentsResource, DocumentTypesResource, DocumentsResource, HttpClient, type HttpClientOptions, type NonUndefined, type OperationNames, type OperationParameters, type OperationPathParams, type OperationQuery, type OperationRequestBody, type OperationResponse, type Operations, type PaginatedResponse, PaperlessApiError, PaperlessClient, type PaperlessClientOptions, type Paths, type Schema, TagsResource, TasksResource, UsersResource, buildPath, createOptionsFromEnv, createPaperlessClient, loadPaperlessEnv };
